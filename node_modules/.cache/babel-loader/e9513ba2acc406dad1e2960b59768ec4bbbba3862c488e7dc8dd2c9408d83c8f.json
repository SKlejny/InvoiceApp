{"ast":null,"code":"// src/hooks/useGraph.js\nimport{useState,useCallback}from'react';import{getAccessToken,fetchFilesFromFolder,moveFile,downloadFileContent}from'../services/sharepointService';import{FOLDER_DETAILS,FOLDER_NAMES}from'../utils/constants';const initialFoldersState={[FOLDER_NAMES.INCOMING_INVOICES]:[],[FOLDER_NAMES.APPROVED_INVOICES]:[],[FOLDER_NAMES.PUBLISHED_DOCUMENTS]:[],[FOLDER_NAMES.SENT_DOCUMENTS]:[]};const useGraph=(instance,accounts)=>{const[folders,setFolders]=useState(initialFoldersState);const[isLoading,setIsLoading]=useState(false);const[error,setError]=useState(null);const fetchSharePointData=useCallback(async()=>{setIsLoading(true);setError(null);try{const accessToken=await getAccessToken(instance,accounts);const folderPromises=Object.entries(FOLDER_DETAILS).map(async _ref=>{let[key,details]=_ref;const files=await fetchFilesFromFolder(accessToken,details.id);return{[details.path]:files};});const results=await Promise.all(folderPromises);const allFolders=results.reduce((acc,current)=>({...acc,...current}),{});setFolders(allFolders);}catch(e){console.error(\"Failed to fetch SharePoint data:\",e);setError(\"Could not load files from SharePoint. Please refresh.\");}finally{setIsLoading(false);}// FIX: The dependency array should not include `isLoading`.\n},[instance,accounts]);const moveSharePointFile=useCallback(async(fileId,sourceFolderId,destinationFolderId)=>{setIsLoading(true);try{const accessToken=await getAccessToken(instance,accounts);await moveFile(accessToken,fileId,destinationFolderId);}catch(e){console.error(\"Failed to move file:\",e);throw new Error(\"Failed to move the file.\");}finally{setIsLoading(false);}},[instance,accounts]);const downloadFileFromSharePoint=useCallback(async file=>{setIsLoading(true);try{const accessToken=await getAccessToken(instance,accounts);return await downloadFileContent(accessToken,file);}catch(e){console.error(\"Failed to download file content:\",e);throw new Error(\"Could not download file content.\");}finally{setIsLoading(false);}},[instance,accounts]);return{folders,isLoading,error,fetchSharePointData,moveSharePointFile,downloadFileFromSharePoint};};export default useGraph;","map":{"version":3,"names":["useState","useCallback","getAccessToken","fetchFilesFromFolder","moveFile","downloadFileContent","FOLDER_DETAILS","FOLDER_NAMES","initialFoldersState","INCOMING_INVOICES","APPROVED_INVOICES","PUBLISHED_DOCUMENTS","SENT_DOCUMENTS","useGraph","instance","accounts","folders","setFolders","isLoading","setIsLoading","error","setError","fetchSharePointData","accessToken","folderPromises","Object","entries","map","_ref","key","details","files","id","path","results","Promise","all","allFolders","reduce","acc","current","e","console","moveSharePointFile","fileId","sourceFolderId","destinationFolderId","Error","downloadFileFromSharePoint","file"],"sources":["/workspaces/InvoiceApp/src/hooks/useGraph.js"],"sourcesContent":["// src/hooks/useGraph.js\nimport { useState, useCallback } from 'react';\nimport { getAccessToken, fetchFilesFromFolder, moveFile, downloadFileContent } from '../services/sharepointService';\nimport { FOLDER_DETAILS, FOLDER_NAMES } from '../utils/constants';\n\nconst initialFoldersState = {\n    [FOLDER_NAMES.INCOMING_INVOICES]: [],\n    [FOLDER_NAMES.APPROVED_INVOICES]: [],\n    [FOLDER_NAMES.PUBLISHED_DOCUMENTS]: [],\n    [FOLDER_NAMES.SENT_DOCUMENTS]: [],\n};\n\nconst useGraph = (instance, accounts) => {\n  const [folders, setFolders] = useState(initialFoldersState);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchSharePointData = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const accessToken = await getAccessToken(instance, accounts);\n      const folderPromises = Object.entries(FOLDER_DETAILS).map(async ([key, details]) => {\n        const files = await fetchFilesFromFolder(accessToken, details.id);\n        return { [details.path]: files };\n      });\n      const results = await Promise.all(folderPromises);\n      const allFolders = results.reduce((acc, current) => ({ ...acc, ...current }), {});\n      setFolders(allFolders);\n    } catch (e) {\n      console.error(\"Failed to fetch SharePoint data:\", e);\n      setError(\"Could not load files from SharePoint. Please refresh.\");\n    } finally {\n      setIsLoading(false);\n    }\n    // FIX: The dependency array should not include `isLoading`.\n  }, [instance, accounts]);\n\n  const moveSharePointFile = useCallback(async (fileId, sourceFolderId, destinationFolderId) => {\n    setIsLoading(true);\n    try {\n      const accessToken = await getAccessToken(instance, accounts);\n      await moveFile(accessToken, fileId, destinationFolderId);\n    } catch (e) {\n      console.error(\"Failed to move file:\", e);\n      throw new Error(\"Failed to move the file.\");\n    } finally {\n      setIsLoading(false);\n    }\n  }, [instance, accounts]);\n  \n  const downloadFileFromSharePoint = useCallback(async (file) => {\n    setIsLoading(true);\n    try {\n        const accessToken = await getAccessToken(instance, accounts);\n        return await downloadFileContent(accessToken, file);\n    } catch(e) {\n        console.error(\"Failed to download file content:\", e);\n        throw new Error(\"Could not download file content.\");\n    } finally {\n        setIsLoading(false);\n    }\n  }, [instance, accounts]);\n\n  return { folders, isLoading, error, fetchSharePointData, moveSharePointFile, downloadFileFromSharePoint };\n};\n\nexport default useGraph;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}