{"ast":null,"code":"var _jsxFileName = \"/workspaces/InvoiceApp/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { useMsal, useIsAuthenticated } from '@azure/msal-react';\nimport { InteractionRequiredAuthError } from '@azure/msal-browser';\nimport { loginRequest } from './authConfig';\nimport LoginPage from './pages/LoginPage';\nimport DashboardPage from './pages/DashboardPage';\nimport IncomingInvoicesPage from './pages/IncomingInvoicePage';\nimport PublishedDocumentsPage from './pages/PublishedDocumentsPage';\nimport EditFileModal from './components/EditFileModal';\nimport ViewFileModal from './components/ViewFileModal';\nimport { X, FileText, FileSpreadsheet, Eye, Pencil, CheckCircle, FolderOpen, LogIn, LayoutDashboard, ListTodo, FileBarChart } from 'lucide-react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const {\n    instance,\n    accounts\n  } = useMsal();\n  const isAuthenticated = useIsAuthenticated();\n  const [currentPage, setCurrentPage] = useState(isAuthenticated ? 'dashboard' : 'login');\n  const userProfile = isAuthenticated && accounts.length > 0 ? accounts[0] : null;\n  const [folders, setFolders] = useState({\n    'Incoming Invoices': [],\n    'Approved Invoices': [],\n    'Published Documents': []\n  });\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [isViewModalOpen, setIsViewModalOpen] = useState(false);\n  const [editedFileName, setEditedFileName] = useState('');\n  const [editedFileContent, setEditedFileContent] = '';\n  const [message, setMessage] = useState({\n    text: '',\n    type: ''\n  });\n  const messageTimeoutRef = useRef(null);\n  const showMessage = (text, type = 'success') => {\n    setMessage({\n      text,\n      type\n    });\n    if (messageTimeoutRef.current) {\n      clearTimeout(messageTimeoutRef.current);\n    }\n    messageTimeoutRef.current = setTimeout(() => {\n      setMessage({\n        text: '',\n        type: ''\n      });\n    }, 3000);\n  };\n  const handleMicrosoftLogin = async () => {\n    try {\n      await instance.loginPopup(loginRequest);\n      setCurrentPage('dashboard');\n      showMessage('Logged in successfully!', 'success');\n    } catch (error) {\n      console.error(\"Microsoft login failed:\", error);\n      showMessage('Login failed. Please try again.', 'error');\n    }\n  };\n  const handleLogout = () => {\n    instance.logoutPopup();\n    setCurrentPage('login');\n    showMessage('Logged out successfully.', 'success');\n  };\n  const getAccessToken = useCallback(async () => {\n    if (accounts.length === 0) {\n      console.error(\"getAccessToken: No active account found.\");\n      throw new Error(\"No active account found. Please login.\");\n    }\n    try {\n      const response = await instance.acquireTokenSilent({\n        ...loginRequest,\n        account: accounts[0]\n      });\n      console.log(\"getAccessToken: Acquired token:\", response.accessToken ? \"Token acquired successfully (not empty)\" : \"Token is empty/undefined\");\n      return response.accessToken;\n    } catch (error) {\n      if (error instanceof InteractionRequiredAuthError) {\n        console.warn(\"Interaction required to acquire token. Attempting popup...\");\n        try {\n          const response = await instance.acquireTokenPopup(loginRequest);\n          console.log(\"getAccessToken: Acquired token via popup:\", response.accessToken ? \"Token acquired successfully (not empty)\" : \"Token is empty/undefined\");\n          return response.accessToken;\n        } catch (popupError) {\n          console.error(\"Error acquiring token via popup:\", popupError);\n          showMessage('Authentication required. Please log in again.', 'error');\n          handleLogout();\n          throw popupError;\n        }\n      }\n      console.error(\"Error acquiring token silently:\", error);\n      showMessage('Failed to acquire token. Please try again.', 'error');\n      throw error;\n    }\n  }, [accounts, instance, showMessage, handleLogout]);\n\n  // --- SharePoint API (Microsoft Graph) Integration Configuration ---\n  // YOU MUST FILL THESE OUT with your actual SharePoint IDs and folder paths!\n  // Use Microsoft Graph Explorer (https://developer.microsoft.com/en-us/graph/graph-explorer)\n  // to find these values.\n  //\n  // 1. SHAREPOINT_SITE_ID: From GET https://graph.microsoft.com/v1.0/sites/eamlondon.sharepoint.com:/sites/EAM%20Internal\n  const SHAREPOINT_SITE_ID = \"YOUR_SHAREPOINT_SITE_ID\"; // <--- FILL THIS OUT (e.g., \"eamlondon.sharepoint.com,some-guid,another-guid\")\n\n  // 2. SHAREPOINT_DRIVE_ID: From GET https://graph.microsoft.com/v1.0/sites/YOUR_SITE_ID/drives\n  const SHAREPOINT_DRIVE_ID = \"YOUR_SHAREPOINT_DRIVE_ID\"; // <--- FILL THIS OUT (e.g., \"b!some-guid!another-guid\")\n\n  // 3. APPROVED_INVOICES_FOLDER_ITEM_ID: This is the ITEM ID of your 'Raised in QB' folder.\n  //    From GET https://graph.microsoft.com/v1.0/sites/YOUR_SITE_ID/drives/YOUR_DRIVE_ID/root:/_EAM%20internal/2.%20Billing/EAM%20Invoices/Draft%20Invoices/Approved%20WIP/Raised%20in%20QB:/\n  const APPROVED_INVOICES_FOLDER_ITEM_ID = \"YOUR_APPROVED_INVOICES_FOLDER_ITEM_ID\"; // <--- FILL THIS OUT (e.g., \"0123456789abcdef\")\n\n  // 4. INCOMING_INVOICES_FOLDER_PATH: The full path to your 'Draft Invoices' folder.\n  //    Matches the ID path part: /EAM%20Internal/_EAM%20internal/2.%20Billing/EAM%20Invoices/Draft%20Invoices\n  const INCOMING_INVOICES_FOLDER_PATH = \"_EAM internal/2. Billing/EAM Invoices/Draft Invoices\"; // <--- NO ID, JUST THE PATH\n\n  // 5. PUBLISHED_DOCUMENTS_FOLDER_PATH: The full path to your 'viewable' documents folder.\n  //    YOU NEED TO DETERMINE THIS PATH IN YOUR SHAREPOINT.\n  const PUBLISHED_DOCUMENTS_FOLDER_PATH = \"PATH_TO_YOUR_PUBLISHED_DOCUMENTS_FOLDER\"; // <--- FILL THIS OUT (e.g., \"EAM Documents/Reports\")\n\n  /**\n   * Lists files in a SharePoint folder using Microsoft Graph API.\n   * @param {string} folderFullPath The full path to the folder from the drive root.\n   * @returns {Promise<Array>} A promise that resolves with an array of file objects.\n   */\n  const listFilesInSharePointFolder = useCallback(async folderFullPath => {\n    if (!isAuthenticated) return [];\n    if (!SHAREPOINT_SITE_ID || !SHAREPOINT_DRIVE_ID) {\n      console.error(\"SharePoint Site ID or Drive ID not configured.\");\n      showMessage(\"SharePoint configuration missing. Cannot load files.\", \"error\");\n      return [];\n    }\n    try {\n      const accessToken = await getAccessToken();\n      if (!accessToken) {\n        throw new Error(\"Access token is empty. Cannot list files.\");\n      }\n      console.log(`Fetching files from SharePoint folder: \"${folderFullPath}\"`);\n\n      // Encode the entire folder path for the URL\n      const encodedFolderPath = encodeURIComponent(folderFullPath);\n      const response = await fetch(`https://graph.microsoft.com/v1.0/sites/${SHAREPOINT_SITE_ID}/drives/${SHAREPOINT_DRIVE_ID}/root:/${encodedFolderPath}:/children`, {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`\n        }\n      });\n      if (!response.ok) {\n        const errorBody = await response.json();\n        console.error(\"Graph API Error:\", errorBody);\n        throw new Error(`HTTP error listing files! Status: ${response.status} - ${response.statusText}. Details: ${errorBody.error.message || 'No further details.'}`);\n      }\n      const data = await response.json();\n\n      // Filter out subfolders, only return files (Graph returns both by default)\n      return data.value.filter(item => item.file) // Only include items that have a 'file' property (i.e., are files, not folders)\n      .map(item => ({\n        id: item.id,\n        name: item.name,\n        type: item.file ? item.file.mimeType.includes('pdf') ? 'pdf' : 'xlsx' : 'unknown'\n        // Note: item.size and item.lastModifiedDateTime are also available if needed for display\n      }));\n    } catch (error) {\n      console.error(`Error listing files in SharePoint folder \"${folderFullPath}\":`, error);\n      showMessage(`Failed to load files from ${folderFullPath}. Error: ${error.message}`, 'error');\n      return [];\n    }\n  }, [isAuthenticated, getAccessToken, showMessage, SHAREPOINT_SITE_ID, SHAREPOINT_DRIVE_ID]); // Added missing dependency for listFilesInSharePointFolder\n\n  /**\n   * Reads the content of a file from SharePoint using Microsoft Graph API.\n   * @param {object} file The file object (must have 'id' and 'name').\n   * @returns {Promise<string>} A promise that resolves with the file content.\n   */\n  const readFileContent = useCallback(async file => {\n    try {\n      const accessToken = await getAccessToken();\n      if (!accessToken) {\n        throw new Error(\"Access token is empty. Cannot read file content.\");\n      }\n      console.log(`Attempting to read content of \"${file.name}\" from SharePoint.`);\n      const response = await fetch(`https://graph.microsoft.com/v1.0/sites/${SHAREPOINT_SITE_ID}/drives/${SHAREPOINT_DRIVE_ID}/items/${file.id}/content`, {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`\n        }\n      });\n      if (!response.ok) {\n        const errorBody = await response.json();\n        console.error(\"Graph API Error:\", errorBody);\n        throw new Error(`HTTP error reading file content! Status: ${response.status} - ${response.statusText}. Details: ${errorBody.error.message || 'No further details.'}`);\n      }\n      const content = await response.text();\n      return content;\n    } catch (error) {\n      console.error(\"Error reading file content from SharePoint:\", error);\n      showMessage('Failed to read file content.', 'error');\n      throw error;\n    }\n  }, [getAccessToken, showMessage, SHAREPOINT_SITE_ID, SHAREPOINT_DRIVE_ID]);\n\n  /**\n   * Updates a file's name and/or content in SharePoint using Microsoft Graph API.\n   * @param {string} fileId The ID of the file to update.\n   * @param {string} newName The new name for the file (optional).\n   * @param {string} newContent The new content for the file (optional).\n   * @returns {Promise<boolean>} A promise that resolves to true on success.\n   */\n  const updateFile = useCallback(async (fileId, newName, newContent) => {\n    try {\n      const accessToken = await getAccessToken();\n      if (!accessToken) {\n        throw new Error(\"Access token is empty. Cannot update file.\");\n      }\n      console.log(`Attempting to update file ID \"${fileId}\" in SharePoint.`);\n      let contentUpdateSuccess = true;\n\n      // Handle content update first (PUT request to /content endpoint)\n      if (newContent !== undefined) {\n        const contentResponse = await fetch(`https://graph.microsoft.com/v1.0/sites/${SHAREPOINT_SITE_ID}/drives/${SHAREPOINT_DRIVE_ID}/items/${fileId}/content`, {\n          method: 'PUT',\n          headers: {\n            'Authorization': `Bearer ${accessToken}`,\n            'Content-Type': 'text/plain' // Adjust for actual XLSX file type (e.g., 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n          },\n          body: newContent\n        });\n        if (!contentResponse.ok) {\n          contentUpdateSuccess = false;\n          const errorBody = await contentResponse.json();\n          console.error(\"Graph API Content Update Error:\", errorBody);\n          throw new Error(`Content update failed: ${contentResponse.status} - ${contentResponse.statusText}. Details: ${errorBody.error.message || 'No further details.'}`);\n        }\n      }\n\n      // Handle name update (PATCH request to item endpoint)\n      if (newName !== undefined && newName !== (selectedFile === null || selectedFile === void 0 ? void 0 : selectedFile.name)) {\n        // Check if name actually changed\n        const updatePayload = {\n          name: newName\n        };\n        const renameResponse = await fetch(`https://graph.microsoft.com/v1.0/sites/${SHAREPOINT_SITE_ID}/drives/${SHAREPOINT_DRIVE_ID}/items/${fileId}`, {\n          method: 'PATCH',\n          headers: {\n            'Authorization': `Bearer ${accessToken}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(updatePayload)\n        });\n        if (!renameResponse.ok) {\n          const errorBody = await renameResponse.json();\n          console.error(\"Graph API Rename Error:\", errorBody);\n          throw new Error(`Rename failed: ${renameResponse.status} - ${renameResponse.statusText}. Details: ${errorBody.error.message || 'No further details.'}`);\n        }\n      }\n      if (contentUpdateSuccess) {\n        fetchFolders(); // Re-fetch all relevant folder contents after successful update\n        return true;\n      }\n      return false; // Indicate failure if content update failed\n    } catch (error) {\n      console.error(\"Error updating file in SharePoint:\", error);\n      showMessage('Failed to update file.', 'error');\n      throw error;\n    }\n  }, [getAccessToken, showMessage, SHAREPOINT_SITE_ID, SHAREPOINT_DRIVE_ID, fetchFolders, selectedFile]); // Added selectedFile to dependencies\n\n  /**\n   * Moves a file from one folder to another in SharePoint using Microsoft Graph API.\n   * @param {string} fileId The ID of the file to move.\n   * @returns {Promise<boolean>} A promise that resolves to true on success.\n   */\n  const moveFile = useCallback(async fileId => {\n    if (!APPROVED_INVOICES_FOLDER_ITEM_ID) {\n      console.error(\"APPROVED_INVOICES_FOLDER_ITEM_ID is not configured.\");\n      showMessage(\"Approved Invoices folder ID missing. Cannot move file.\", \"error\");\n      return false;\n    }\n    try {\n      const accessToken = await getAccessToken();\n      if (!accessToken) {\n        throw new Error(\"Access token is empty. Cannot move file.\");\n      }\n      console.log(`Attempting to move file ID \"${fileId}\" to Approved Invoices folder.`);\n      const response = await fetch(`https://graph.microsoft.com/v1.0/sites/${SHAREPOINT_SITE_ID}/drives/${SHAREPOINT_DRIVE_ID}/items/${fileId}`, {\n        method: 'PATCH',\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          parentReference: {\n            id: APPROVED_INVOICES_FOLDER_ITEM_ID // Use the ITEM ID of the destination folder\n          }\n        })\n      });\n      if (!response.ok) {\n        const errorBody = await response.json();\n        console.error(\"Graph API Move Error:\", errorBody);\n        throw new Error(`Move failed: ${response.status} - ${response.statusText}. Details: ${errorBody.error.message || 'No further details.'}`);\n      }\n      fetchFolders(); // Re-fetch all relevant folder contents after successful move\n      return true;\n    } catch (error) {\n      console.error(\"Error moving file in SharePoint:\", error);\n      showMessage('Failed to move file.', 'error');\n      throw error;\n    }\n  }, [getAccessToken, showMessage, APPROVED_INVOICES_FOLDER_ITEM_ID, SHAREPOINT_DRIVE_ID, SHAREPOINT_SITE_ID, fetchFolders]);\n\n  // Unified function to fetch files for all relevant folders\n  const fetchFolders = useCallback(async () => {\n    if (!isAuthenticated) {\n      setFolders({\n        'Incoming Invoices': [],\n        'Published Documents': [],\n        'Approved Invoices': []\n      });\n      return;\n    }\n    // Only fetch if SharePoint IDs are provided\n    if (!SHAREPOINT_SITE_ID || !SHAREPOINT_DRIVE_ID) {\n      console.error(\"SharePoint configuration missing. Cannot fetch folders.\");\n      showMessage(\"SharePoint configuration missing. Please provide Site ID and Drive ID.\", \"error\");\n      return;\n    }\n    try {\n      // Use the specific paths you determined from SharePoint\n      const incoming = await listFilesInSharePointFolder(INCOMING_INVOICES_FOLDER_PATH);\n      const published = await listFilesInSharePointFolder(PUBLISHED_DOCUMENTS_FOLDER_PATH);\n      setFolders(prev => ({\n        ...prev,\n        'Incoming Invoices': incoming,\n        'Published Documents': published\n      }));\n    } catch (error) {\n      console.error(\"Error fetching all folders:\", error);\n    }\n  }, [isAuthenticated, listFilesInSharePointFolder, INCOMING_INVOICES_FOLDER_PATH, PUBLISHED_DOCUMENTS_FOLDER_PATH, SHAREPOINT_SITE_ID, SHAREPOINT_DRIVE_ID]);\n\n  // Effect to fetch folder data when authenticated or when relevant pages are loaded\n  useEffect(() => {\n    if (isAuthenticated) {\n      fetchFolders();\n    } else {\n      setFolders({\n        'Incoming Invoices': [],\n        'Published Documents': [],\n        'Approved Invoices': []\n      });\n    }\n  }, [isAuthenticated, fetchFolders]);\n  const handleEditClick = async file => {\n    setSelectedFile(file);\n    setEditedFileName(file.name);\n    try {\n      const content = await readFileContent(file);\n      setEditedFileContent(content); // Corrected: this needs to be a useState setter\n      setIsEditModalOpen(true);\n    } catch (error) {\n      console.error(\"Failed to load file content for editing:\", error);\n      showMessage('Could not load file content for editing.', 'error');\n    }\n  };\n  const handleSaveEdit = async () => {\n    if (selectedFile) {\n      try {\n        await updateFile(selectedFile.id, editedFileName, editedFileContent);\n        showMessage('File saved successfully!', 'success');\n        setIsEditModalOpen(false);\n        setSelectedFile(null);\n      } catch (error) {\n        console.error(\"Error saving file:\", error);\n        showMessage('Failed to save file.', 'error');\n      }\n    }\n  };\n  const handleApprove = async fileId => {\n    try {\n      await moveFile(fileId);\n      showMessage('Invoice approved and moved!', 'success');\n    } catch (error) {\n      console.error(\"Error approving invoice:\", error);\n      showMessage('Failed to approve invoice.', 'error');\n    }\n  };\n  const handleView = async file => {\n    setSelectedFile(file);\n    try {\n      const content = await readFileContent(file);\n      setEditedFileContent(content); // Corrected: this needs to be a useState setter\n      setIsViewModalOpen(true);\n    } catch (error) {\n      console.error(\"Failed to load file content for viewing:\", error);\n      showMessage('Could not load file content for viewing.', 'error');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"relative min-h-screen flex flex-col\",\n    children: [message.text && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `fixed top-4 right-4 p-3 rounded-lg shadow-lg z-50 ${message.type === 'success' ? 'bg-green-500 text-white' : 'bg-red-500 text-white'}`,\n      children: message.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"flex-grow\",\n      children: !isAuthenticated ? /*#__PURE__*/_jsxDEV(LoginPage, {\n        onLogin: handleMicrosoftLogin\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [currentPage === 'dashboard' && /*#__PURE__*/_jsxDEV(DashboardPage, {\n          userProfile: userProfile,\n          folders: folders,\n          setCurrentPage: setCurrentPage,\n          onLogout: handleLogout\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 15\n        }, this), currentPage === 'incomingInvoices' && /*#__PURE__*/_jsxDEV(IncomingInvoicesPage, {\n          files: folders['Incoming Invoices'],\n          setCurrentPage: setCurrentPage,\n          onEdit: handleEditClick,\n          onApprove: handleApprove,\n          onView: handleView\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 15\n        }, this), currentPage === 'publishedDocuments' && /*#__PURE__*/_jsxDEV(PublishedDocumentsPage, {\n          files: folders['Published Documents'],\n          setCurrentPage: setCurrentPage,\n          onView: handleView\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EditFileModal, {\n      isOpen: isEditModalOpen,\n      onClose: () => setIsEditModalOpen(false),\n      fileName: editedFileName,\n      onFileNameChange: e => setEditedFileName(e.target.value),\n      fileContent: editedFileContent,\n      onFileContentChange: e => setEditedFileContent(e.target.value),\n      onSave: handleSaveEdit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ViewFileModal, {\n      isOpen: isViewModalOpen,\n      onClose: () => setIsViewModalOpen(false),\n      fileName: (selectedFile === null || selectedFile === void 0 ? void 0 : selectedFile.name) || '',\n      fileContent: editedFileContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"text-center text-gray-500 mt-auto py-4 text-sm bg-gray-50 w-full border-t border-gray-200\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\xA9 2024 Invoice System. All rights reserved. \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-xs mt-2\",\n        children: \"This application is now attempting direct SharePoint integration via Microsoft Graph API.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 427,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"23Uv94JdYgFjpIRui6AwvYEbccU=\", false, function () {\n  return [useMsal, useIsAuthenticated];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useCallback","useMsal","useIsAuthenticated","InteractionRequiredAuthError","loginRequest","LoginPage","DashboardPage","IncomingInvoicesPage","PublishedDocumentsPage","EditFileModal","ViewFileModal","X","FileText","FileSpreadsheet","Eye","Pencil","CheckCircle","FolderOpen","LogIn","LayoutDashboard","ListTodo","FileBarChart","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","instance","accounts","isAuthenticated","currentPage","setCurrentPage","userProfile","length","folders","setFolders","selectedFile","setSelectedFile","isEditModalOpen","setIsEditModalOpen","isViewModalOpen","setIsViewModalOpen","editedFileName","setEditedFileName","editedFileContent","setEditedFileContent","message","setMessage","text","type","messageTimeoutRef","showMessage","current","clearTimeout","setTimeout","handleMicrosoftLogin","loginPopup","error","console","handleLogout","logoutPopup","getAccessToken","Error","response","acquireTokenSilent","account","log","accessToken","warn","acquireTokenPopup","popupError","SHAREPOINT_SITE_ID","SHAREPOINT_DRIVE_ID","APPROVED_INVOICES_FOLDER_ITEM_ID","INCOMING_INVOICES_FOLDER_PATH","PUBLISHED_DOCUMENTS_FOLDER_PATH","listFilesInSharePointFolder","folderFullPath","encodedFolderPath","encodeURIComponent","fetch","headers","ok","errorBody","json","status","statusText","data","value","filter","item","file","map","id","name","mimeType","includes","readFileContent","content","updateFile","fileId","newName","newContent","contentUpdateSuccess","undefined","contentResponse","method","body","updatePayload","renameResponse","JSON","stringify","fetchFolders","moveFile","parentReference","incoming","published","prev","handleEditClick","handleSaveEdit","handleApprove","handleView","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onLogin","onLogout","files","onEdit","onApprove","onView","isOpen","onClose","onFileNameChange","e","target","fileContent","onFileContentChange","onSave","_c","$RefreshReg$"],"sources":["/workspaces/InvoiceApp/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { useMsal, useIsAuthenticated } from '@azure/msal-react';\nimport { InteractionRequiredAuthError } from '@azure/msal-browser';\n\nimport { loginRequest } from './authConfig';\n\nimport LoginPage from './pages/LoginPage';\nimport DashboardPage from './pages/DashboardPage';\nimport IncomingInvoicesPage from './pages/IncomingInvoicePage';\nimport PublishedDocumentsPage from './pages/PublishedDocumentsPage';\n\nimport EditFileModal from './components/EditFileModal';\nimport ViewFileModal from './components/ViewFileModal';\n\nimport {\n  X, FileText, FileSpreadsheet, Eye, Pencil, CheckCircle, FolderOpen, LogIn, LayoutDashboard, ListTodo, FileBarChart\n} from 'lucide-react';\n\n\nfunction App() {\n  const { instance, accounts } = useMsal();\n  const isAuthenticated = useIsAuthenticated();\n\n  const [currentPage, setCurrentPage] = useState(isAuthenticated ? 'dashboard' : 'login');\n  const userProfile = isAuthenticated && accounts.length > 0 ? accounts[0] : null;\n\n  const [folders, setFolders] = useState({\n    'Incoming Invoices': [],\n    'Approved Invoices': [],\n    'Published Documents': [],\n  });\n\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [isViewModalOpen, setIsViewModalOpen] = useState(false);\n  const [editedFileName, setEditedFileName] = useState('');\n  const [editedFileContent, setEditedFileContent] = '';\n  \n  const [message, setMessage] = useState({ text: '', type: '' });\n  const messageTimeoutRef = useRef(null);\n\n  const showMessage = (text, type = 'success') => {\n    setMessage({ text, type });\n    if (messageTimeoutRef.current) {\n      clearTimeout(messageTimeoutRef.current);\n    }\n    messageTimeoutRef.current = setTimeout(() => {\n      setMessage({ text: '', type: '' });\n    }, 3000);\n  };\n\n  const handleMicrosoftLogin = async () => {\n    try {\n      await instance.loginPopup(loginRequest);\n      setCurrentPage('dashboard');\n      showMessage('Logged in successfully!', 'success');\n    } catch (error) {\n      console.error(\"Microsoft login failed:\", error);\n      showMessage('Login failed. Please try again.', 'error');\n    }\n  };\n\n  const handleLogout = () => {\n    instance.logoutPopup();\n    setCurrentPage('login');\n    showMessage('Logged out successfully.', 'success');\n  };\n\n  const getAccessToken = useCallback(async () => {\n    if (accounts.length === 0) {\n      console.error(\"getAccessToken: No active account found.\");\n      throw new Error(\"No active account found. Please login.\");\n    }\n    try {\n      const response = await instance.acquireTokenSilent({\n        ...loginRequest,\n        account: accounts[0]\n      });\n      console.log(\"getAccessToken: Acquired token:\", response.accessToken ? \"Token acquired successfully (not empty)\" : \"Token is empty/undefined\");\n      return response.accessToken;\n    } catch (error) {\n      if (error instanceof InteractionRequiredAuthError) {\n        console.warn(\"Interaction required to acquire token. Attempting popup...\");\n        try {\n          const response = await instance.acquireTokenPopup(loginRequest);\n          console.log(\"getAccessToken: Acquired token via popup:\", response.accessToken ? \"Token acquired successfully (not empty)\" : \"Token is empty/undefined\");\n          return response.accessToken;\n        } catch (popupError) {\n          console.error(\"Error acquiring token via popup:\", popupError);\n          showMessage('Authentication required. Please log in again.', 'error');\n          handleLogout();\n          throw popupError;\n        }\n      }\n      console.error(\"Error acquiring token silently:\", error);\n      showMessage('Failed to acquire token. Please try again.', 'error');\n      throw error;\n    }\n  }, [accounts, instance, showMessage, handleLogout]);\n\n\n  // --- SharePoint API (Microsoft Graph) Integration Configuration ---\n  // YOU MUST FILL THESE OUT with your actual SharePoint IDs and folder paths!\n  // Use Microsoft Graph Explorer (https://developer.microsoft.com/en-us/graph/graph-explorer)\n  // to find these values.\n  //\n  // 1. SHAREPOINT_SITE_ID: From GET https://graph.microsoft.com/v1.0/sites/eamlondon.sharepoint.com:/sites/EAM%20Internal\n  const SHAREPOINT_SITE_ID = \"YOUR_SHAREPOINT_SITE_ID\"; // <--- FILL THIS OUT (e.g., \"eamlondon.sharepoint.com,some-guid,another-guid\")\n\n  // 2. SHAREPOINT_DRIVE_ID: From GET https://graph.microsoft.com/v1.0/sites/YOUR_SITE_ID/drives\n  const SHAREPOINT_DRIVE_ID = \"YOUR_SHAREPOINT_DRIVE_ID\"; // <--- FILL THIS OUT (e.g., \"b!some-guid!another-guid\")\n\n  // 3. APPROVED_INVOICES_FOLDER_ITEM_ID: This is the ITEM ID of your 'Raised in QB' folder.\n  //    From GET https://graph.microsoft.com/v1.0/sites/YOUR_SITE_ID/drives/YOUR_DRIVE_ID/root:/_EAM%20internal/2.%20Billing/EAM%20Invoices/Draft%20Invoices/Approved%20WIP/Raised%20in%20QB:/\n  const APPROVED_INVOICES_FOLDER_ITEM_ID = \"YOUR_APPROVED_INVOICES_FOLDER_ITEM_ID\"; // <--- FILL THIS OUT (e.g., \"0123456789abcdef\")\n\n  // 4. INCOMING_INVOICES_FOLDER_PATH: The full path to your 'Draft Invoices' folder.\n  //    Matches the ID path part: /EAM%20Internal/_EAM%20internal/2.%20Billing/EAM%20Invoices/Draft%20Invoices\n  const INCOMING_INVOICES_FOLDER_PATH = \"_EAM internal/2. Billing/EAM Invoices/Draft Invoices\"; // <--- NO ID, JUST THE PATH\n\n  // 5. PUBLISHED_DOCUMENTS_FOLDER_PATH: The full path to your 'viewable' documents folder.\n  //    YOU NEED TO DETERMINE THIS PATH IN YOUR SHAREPOINT.\n  const PUBLISHED_DOCUMENTS_FOLDER_PATH = \"PATH_TO_YOUR_PUBLISHED_DOCUMENTS_FOLDER\"; // <--- FILL THIS OUT (e.g., \"EAM Documents/Reports\")\n\n\n  /**\n   * Lists files in a SharePoint folder using Microsoft Graph API.\n   * @param {string} folderFullPath The full path to the folder from the drive root.\n   * @returns {Promise<Array>} A promise that resolves with an array of file objects.\n   */\n  const listFilesInSharePointFolder = useCallback(async (folderFullPath) => {\n    if (!isAuthenticated) return [];\n    if (!SHAREPOINT_SITE_ID || !SHAREPOINT_DRIVE_ID) {\n      console.error(\"SharePoint Site ID or Drive ID not configured.\");\n      showMessage(\"SharePoint configuration missing. Cannot load files.\", \"error\");\n      return [];\n    }\n\n    try {\n      const accessToken = await getAccessToken();\n      if (!accessToken) {\n        throw new Error(\"Access token is empty. Cannot list files.\");\n      }\n      console.log(`Fetching files from SharePoint folder: \"${folderFullPath}\"`);\n\n      // Encode the entire folder path for the URL\n      const encodedFolderPath = encodeURIComponent(folderFullPath);\n      const response = await fetch(\n        `https://graph.microsoft.com/v1.0/sites/${SHAREPOINT_SITE_ID}/drives/${SHAREPOINT_DRIVE_ID}/root:/${encodedFolderPath}:/children`,\n        {\n          headers: { 'Authorization': `Bearer ${accessToken}` }\n        }\n      );\n\n      if (!response.ok) {\n        const errorBody = await response.json();\n        console.error(\"Graph API Error:\", errorBody);\n        throw new Error(`HTTP error listing files! Status: ${response.status} - ${response.statusText}. Details: ${errorBody.error.message || 'No further details.'}`);\n      }\n      const data = await response.json();\n      \n      // Filter out subfolders, only return files (Graph returns both by default)\n      return data.value\n        .filter(item => item.file) // Only include items that have a 'file' property (i.e., are files, not folders)\n        .map(item => ({\n          id: item.id,\n          name: item.name,\n          type: item.file ? (item.file.mimeType.includes('pdf') ? 'pdf' : 'xlsx') : 'unknown',\n          // Note: item.size and item.lastModifiedDateTime are also available if needed for display\n        }));\n\n    } catch (error) {\n      console.error(`Error listing files in SharePoint folder \"${folderFullPath}\":`, error);\n      showMessage(`Failed to load files from ${folderFullPath}. Error: ${error.message}`, 'error');\n      return [];\n    }\n  }, [isAuthenticated, getAccessToken, showMessage, SHAREPOINT_SITE_ID, SHAREPOINT_DRIVE_ID]); // Added missing dependency for listFilesInSharePointFolder\n\n\n  /**\n   * Reads the content of a file from SharePoint using Microsoft Graph API.\n   * @param {object} file The file object (must have 'id' and 'name').\n   * @returns {Promise<string>} A promise that resolves with the file content.\n   */\n  const readFileContent = useCallback(async (file) => {\n    try {\n      const accessToken = await getAccessToken();\n       if (!accessToken) {\n        throw new Error(\"Access token is empty. Cannot read file content.\");\n      }\n      console.log(`Attempting to read content of \"${file.name}\" from SharePoint.`);\n\n      const response = await fetch(\n        `https://graph.microsoft.com/v1.0/sites/${SHAREPOINT_SITE_ID}/drives/${SHAREPOINT_DRIVE_ID}/items/${file.id}/content`,\n        {\n          headers: { 'Authorization': `Bearer ${accessToken}` }\n        }\n      );\n\n      if (!response.ok) {\n        const errorBody = await response.json();\n        console.error(\"Graph API Error:\", errorBody);\n        throw new Error(`HTTP error reading file content! Status: ${response.status} - ${response.statusText}. Details: ${errorBody.error.message || 'No further details.'}`);\n      }\n      \n      const content = await response.text(); \n      return content;\n\n    } catch (error) {\n      console.error(\"Error reading file content from SharePoint:\", error);\n      showMessage('Failed to read file content.', 'error');\n      throw error;\n    }\n  }, [getAccessToken, showMessage, SHAREPOINT_SITE_ID, SHAREPOINT_DRIVE_ID]);\n\n\n  /**\n   * Updates a file's name and/or content in SharePoint using Microsoft Graph API.\n   * @param {string} fileId The ID of the file to update.\n   * @param {string} newName The new name for the file (optional).\n   * @param {string} newContent The new content for the file (optional).\n   * @returns {Promise<boolean>} A promise that resolves to true on success.\n   */\n  const updateFile = useCallback(async (fileId, newName, newContent) => {\n    try {\n      const accessToken = await getAccessToken();\n       if (!accessToken) {\n        throw new Error(\"Access token is empty. Cannot update file.\");\n      }\n      console.log(`Attempting to update file ID \"${fileId}\" in SharePoint.`);\n\n      let contentUpdateSuccess = true;\n\n      // Handle content update first (PUT request to /content endpoint)\n      if (newContent !== undefined) {\n         const contentResponse = await fetch(\n           `https://graph.microsoft.com/v1.0/sites/${SHAREPOINT_SITE_ID}/drives/${SHAREPOINT_DRIVE_ID}/items/${fileId}/content`,\n           {\n             method: 'PUT',\n             headers: {\n               'Authorization': `Bearer ${accessToken}`,\n               'Content-Type': 'text/plain' // Adjust for actual XLSX file type (e.g., 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n             },\n             body: newContent\n           }\n         );\n         if (!contentResponse.ok) {\n           contentUpdateSuccess = false;\n           const errorBody = await contentResponse.json();\n           console.error(\"Graph API Content Update Error:\", errorBody);\n           throw new Error(`Content update failed: ${contentResponse.status} - ${contentResponse.statusText}. Details: ${errorBody.error.message || 'No further details.'}`);\n         }\n      }\n\n      // Handle name update (PATCH request to item endpoint)\n      if (newName !== undefined && newName !== selectedFile?.name) { // Check if name actually changed\n        const updatePayload = { name: newName };\n        const renameResponse = await fetch(\n          `https://graph.microsoft.com/v1.0/sites/${SHAREPOINT_SITE_ID}/drives/${SHAREPOINT_DRIVE_ID}/items/${fileId}`,\n          {\n            method: 'PATCH',\n            headers: {\n              'Authorization': `Bearer ${accessToken}`,\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(updatePayload)\n          }\n        );\n        if (!renameResponse.ok) {\n          const errorBody = await renameResponse.json();\n          console.error(\"Graph API Rename Error:\", errorBody);\n          throw new Error(`Rename failed: ${renameResponse.status} - ${renameResponse.statusText}. Details: ${errorBody.error.message || 'No further details.'}`);\n        }\n      }\n\n      if (contentUpdateSuccess) {\n         fetchFolders(); // Re-fetch all relevant folder contents after successful update\n         return true;\n      }\n      return false; // Indicate failure if content update failed\n\n    } catch (error) {\n      console.error(\"Error updating file in SharePoint:\", error);\n      showMessage('Failed to update file.', 'error');\n      throw error;\n    }\n  }, [getAccessToken, showMessage, SHAREPOINT_SITE_ID, SHAREPOINT_DRIVE_ID, fetchFolders, selectedFile]); // Added selectedFile to dependencies\n\n\n  /**\n   * Moves a file from one folder to another in SharePoint using Microsoft Graph API.\n   * @param {string} fileId The ID of the file to move.\n   * @returns {Promise<boolean>} A promise that resolves to true on success.\n   */\n  const moveFile = useCallback(async (fileId) => {\n    if (!APPROVED_INVOICES_FOLDER_ITEM_ID) {\n      console.error(\"APPROVED_INVOICES_FOLDER_ITEM_ID is not configured.\");\n      showMessage(\"Approved Invoices folder ID missing. Cannot move file.\", \"error\");\n      return false;\n    }\n    try {\n      const accessToken = await getAccessToken();\n       if (!accessToken) {\n        throw new Error(\"Access token is empty. Cannot move file.\");\n      }\n      console.log(`Attempting to move file ID \"${fileId}\" to Approved Invoices folder.`);\n\n      const response = await fetch(\n        `https://graph.microsoft.com/v1.0/sites/${SHAREPOINT_SITE_ID}/drives/${SHAREPOINT_DRIVE_ID}/items/${fileId}`,\n        {\n          method: 'PATCH',\n          headers: {\n            'Authorization': `Bearer ${accessToken}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            parentReference: {\n              id: APPROVED_INVOICES_FOLDER_ITEM_ID // Use the ITEM ID of the destination folder\n            }\n          })\n        }\n      );\n\n      if (!response.ok) {\n        const errorBody = await response.json();\n        console.error(\"Graph API Move Error:\", errorBody);\n        throw new Error(`Move failed: ${response.status} - ${response.statusText}. Details: ${errorBody.error.message || 'No further details.'}`);\n      }\n\n      fetchFolders(); // Re-fetch all relevant folder contents after successful move\n      return true;\n\n    } catch (error) {\n      console.error(\"Error moving file in SharePoint:\", error);\n      showMessage('Failed to move file.', 'error');\n      throw error;\n    }\n  }, [getAccessToken, showMessage, APPROVED_INVOICES_FOLDER_ITEM_ID, SHAREPOINT_DRIVE_ID, SHAREPOINT_SITE_ID, fetchFolders]);\n\n\n  // Unified function to fetch files for all relevant folders\n  const fetchFolders = useCallback(async () => {\n    if (!isAuthenticated) {\n      setFolders({ 'Incoming Invoices': [], 'Published Documents': [], 'Approved Invoices': [] });\n      return;\n    }\n    // Only fetch if SharePoint IDs are provided\n    if (!SHAREPOINT_SITE_ID || !SHAREPOINT_DRIVE_ID) {\n      console.error(\"SharePoint configuration missing. Cannot fetch folders.\");\n      showMessage(\"SharePoint configuration missing. Please provide Site ID and Drive ID.\", \"error\");\n      return;\n    }\n    try {\n      // Use the specific paths you determined from SharePoint\n      const incoming = await listFilesInSharePointFolder(INCOMING_INVOICES_FOLDER_PATH);\n      const published = await listFilesInSharePointFolder(PUBLISHED_DOCUMENTS_FOLDER_PATH);\n      \n      setFolders(prev => ({\n        ...prev,\n        'Incoming Invoices': incoming,\n        'Published Documents': published,\n      }));\n    } catch (error) {\n      console.error(\"Error fetching all folders:\", error);\n    }\n  }, [isAuthenticated, listFilesInSharePointFolder, INCOMING_INVOICES_FOLDER_PATH, PUBLISHED_DOCUMENTS_FOLDER_PATH, SHAREPOINT_SITE_ID, SHAREPOINT_DRIVE_ID]);\n\n  // Effect to fetch folder data when authenticated or when relevant pages are loaded\n  useEffect(() => {\n    if (isAuthenticated) {\n      fetchFolders();\n    } else {\n      setFolders({ 'Incoming Invoices': [], 'Published Documents': [], 'Approved Invoices': [] });\n    }\n  }, [isAuthenticated, fetchFolders]);\n\n  const handleEditClick = async (file) => {\n    setSelectedFile(file);\n    setEditedFileName(file.name);\n    try {\n      const content = await readFileContent(file);\n      setEditedFileContent(content); // Corrected: this needs to be a useState setter\n      setIsEditModalOpen(true);\n    } catch (error) {\n      console.error(\"Failed to load file content for editing:\", error);\n      showMessage('Could not load file content for editing.', 'error');\n    }\n  };\n\n  const handleSaveEdit = async () => {\n    if (selectedFile) {\n      try {\n        await updateFile(selectedFile.id, editedFileName, editedFileContent);\n        showMessage('File saved successfully!', 'success');\n        setIsEditModalOpen(false);\n        setSelectedFile(null);\n      } catch (error) {\n        console.error(\"Error saving file:\", error);\n        showMessage('Failed to save file.', 'error');\n      }\n    }\n  };\n\n  const handleApprove = async (fileId) => {\n    try {\n      await moveFile(fileId); \n      showMessage('Invoice approved and moved!', 'success');\n    } catch (error) {\n      console.error(\"Error approving invoice:\", error);\n      showMessage('Failed to approve invoice.', 'error');\n    }\n  };\n\n  const handleView = async (file) => {\n    setSelectedFile(file);\n    try {\n      const content = await readFileContent(file);\n      setEditedFileContent(content); // Corrected: this needs to be a useState setter\n      setIsViewModalOpen(true);\n    } catch (error) {\n      console.error(\"Failed to load file content for viewing:\", error);\n      showMessage('Could not load file content for viewing.', 'error');\n    }\n  };\n\n  return (\n    <div className=\"relative min-h-screen flex flex-col\">\n      {message.text && (\n        <div className={`fixed top-4 right-4 p-3 rounded-lg shadow-lg z-50 ${message.type === 'success' ? 'bg-green-500 text-white' : 'bg-red-500 text-white'}`}>\n          {message.text}\n        </div>\n      )}\n\n      <main className=\"flex-grow\">\n        {!isAuthenticated ? (\n          <LoginPage onLogin={handleMicrosoftLogin} />\n        ) : (\n          <>\n            {currentPage === 'dashboard' && (\n              <DashboardPage\n                userProfile={userProfile}\n                folders={folders}\n                setCurrentPage={setCurrentPage}\n                onLogout={handleLogout}\n              />\n            )}\n            {currentPage === 'incomingInvoices' && (\n              <IncomingInvoicesPage\n                files={folders['Incoming Invoices']}\n                setCurrentPage={setCurrentPage}\n                onEdit={handleEditClick}\n                onApprove={handleApprove}\n                onView={handleView}\n              />\n            )}\n            {currentPage === 'publishedDocuments' && (\n              <PublishedDocumentsPage\n                files={folders['Published Documents']}\n                setCurrentPage={setCurrentPage}\n                onView={handleView}\n              />\n            )}\n          </>\n        )}\n      </main>\n\n      <EditFileModal\n        isOpen={isEditModalOpen}\n        onClose={() => setIsEditModalOpen(false)}\n        fileName={editedFileName}\n        onFileNameChange={(e) => setEditedFileName(e.target.value)}\n        fileContent={editedFileContent}\n        onFileContentChange={(e) => setEditedFileContent(e.target.value)}\n        onSave={handleSaveEdit}\n      />\n      <ViewFileModal\n        isOpen={isViewModalOpen}\n        onClose={() => setIsViewModalOpen(false)}\n        fileName={selectedFile?.name || ''}\n        fileContent={editedFileContent}\n      />\n\n      <footer className=\"text-center text-gray-500 mt-auto py-4 text-sm bg-gray-50 w-full border-t border-gray-200\">\n        <p>&copy; 2024 Invoice System. All rights reserved. </p>\n        <p className=\"text-xs mt-2\">\n          This application is now attempting direct SharePoint integration via Microsoft Graph API.\n        </p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}