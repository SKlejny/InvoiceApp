{"ast":null,"code":"var _jsxFileName = \"/workspaces/InvoiceApp/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\n// Import MSAL hooks\nimport { useMsal, useIsAuthenticated } from '@azure/msal-react';\nimport { InteractionRequiredAuthError } from '@azure/msal-browser';\n\n// Import your MSAL configuration for login requests\nimport { loginRequest } from './authConfig'; // Ensure authConfig.js is in the same directory as App.js or adjust path\n\n// Import Page Components from the './pages/' directory\nimport LoginPage from './pages/LoginPage'; // Ensure LoginPage.js exists in src/pages\nimport DashboardPage from './pages/DashboardPage'; // Ensure DashboardPage.js exists in src/pages\nimport IncomingInvoicesPage from './pages/IncomingInvoicePage'; // Ensure IncomingInvoicesPage.js exists in src/pages\nimport PublishedDocumentsPage from './pages/PublishedDocumentsPage'; // Ensure PublishedDocumentsPage.js exists in src/pages\n\n// Import Reusable Component Modals from the './components/' directory\nimport EditFileModal from './components/EditFileModal'; // Ensure EditFileModal.js exists in src/components\nimport ViewFileModal from './components/ViewFileModal'; // Ensure ViewFileModal.js exists in src/components\n\n// Import icons\nimport { X, FileText, FileSpreadsheet, Eye, Pencil, CheckCircle, FolderOpen, LogIn, LayoutDashboard, ListTodo, FileBarChart } from 'lucide-react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // MSAL hooks for authentication state and instance management\n  const {\n    instance,\n    accounts\n  } = useMsal();\n  const isAuthenticated = useIsAuthenticated();\n\n  // --- Global State Management ---\n  // If not authenticated, always start on the 'login' page.\n  // If authenticated, determine current page based on userProfile (or saved preference, if any).\n  // For simplicity, we'll set it to 'dashboard' if authenticated.\n  const [currentPage, setCurrentPage] = useState(isAuthenticated ? 'dashboard' : 'login');\n\n  // userProfile will now be derived from MSAL's accounts array\n  const userProfile = isAuthenticated && accounts.length > 0 ? accounts[0] : null;\n\n  // Simulated SharePoint folder and file data\n  const [folders, setFolders] = useState({\n    'Incoming Invoices': [{\n      id: 'inv-001.xlsx',\n      name: 'invoice-001.xlsx',\n      type: 'xlsx',\n      content: 'Invoice 001 data for approval...'\n    }, {\n      id: 'inv-002.xlsx',\n      name: 'invoice-002.xlsx',\n      type: 'xlsx',\n      content: 'Invoice 002 data for approval...'\n    }, {\n      id: 'inv-003.xlsx',\n      name: 'invoice-003.xlsx',\n      type: 'xlsx',\n      content: 'Invoice 003 data for approval...'\n    }],\n    'Approved Invoices': [{\n      id: 'inv-004.xlsx',\n      name: 'invoice-004.xlsx',\n      type: 'xlsx',\n      content: 'Invoice 004 data (approved example)...'\n    }],\n    'Published Documents': [{\n      id: 'doc-report-q1.pdf',\n      name: 'report-Q1.pdf',\n      type: 'pdf',\n      content: 'Quarterly Report Q1 2024 content...'\n    }, {\n      id: 'doc-summary-2023.xlsx',\n      name: 'summary-2023.xlsx',\n      type: 'xlsx',\n      content: 'Yearly Summary 2023 data...'\n    }, {\n      id: 'doc-policy-update.pdf',\n      name: 'policy-update.pdf',\n      type: 'pdf',\n      content: 'Company Policy Update content...'\n    }]\n  });\n\n  // State for file editing and viewing modals\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [isViewModalOpen, setIsViewModalOpen] = useState(false);\n  const [editedFileName, setEditedFileName] = useState('');\n  const [editedFileContent, setEditedFileContent] = useState('');\n\n  // State for global success/error messages\n  const [message, setMessage] = useState({\n    text: '',\n    type: ''\n  });\n  const messageTimeoutRef = useRef(null);\n\n  // Function to show a temporary message\n  const showMessage = (text, type = 'success') => {\n    setMessage({\n      text,\n      type\n    });\n    if (messageTimeoutRef.current) {\n      clearTimeout(messageTimeoutRef.current);\n    }\n    messageTimeoutRef.current = setTimeout(() => {\n      setMessage({\n        text: '',\n        type: ''\n      });\n    }, 3000);\n  };\n\n  // --- Microsoft Authentication Functions ---\n  const handleMicrosoftLogin = async () => {\n    try {\n      // Initiates the login process via a pop-up window\n      await instance.loginPopup(loginRequest);\n      // If login is successful, useIsAuthenticated will update, and App will re-render\n      setCurrentPage('dashboard'); // Navigate to dashboard on successful login\n      showMessage('Logged in successfully!', 'success');\n    } catch (error) {\n      console.error(\"Microsoft login failed:\", error);\n      showMessage('Login failed. Please try again.', 'error');\n    }\n  };\n  const handleLogout = () => {\n    // Logs out the user from MSAL and redirects to login page\n    instance.logoutPopup(); // or logoutRedirect()\n    setCurrentPage('login'); // Set page state manually to login immediately\n    showMessage('Logged out successfully.', 'success');\n  };\n\n  /**\n   * Acquires an access token silently using MSAL.js.\n   * This token is then used to authenticate requests to Microsoft Graph API.\n   * @returns {Promise<string>} A promise that resolves with the access token.\n   */\n  const getAccessToken = async () => {\n    if (accounts.length === 0) {\n      throw new Error(\"No active account found. Please login.\");\n    }\n    try {\n      // Attempt to acquire token silently first\n      const response = await instance.acquireTokenSilent({\n        ...loginRequest,\n        account: accounts[0]\n      });\n      return response.accessToken;\n    } catch (error) {\n      // If silent acquisition fails (e.g., AAD requires re-authentication),\n      // prompt user to interactively re-authenticate.\n      if (error instanceof InteractionRequiredAuthError) {\n        console.warn(\"Interaction required to acquire token. Attempting popup...\");\n        try {\n          const response = await instance.acquireTokenPopup(loginRequest);\n          return response.accessToken;\n        } catch (popupError) {\n          console.error(\"Error acquiring token via popup:\", popupError);\n          showMessage('Authentication required. Please log in again.', 'error');\n          handleLogout(); // Force logout if re-auth fails\n          throw popupError;\n        }\n      }\n      console.error(\"Error acquiring token silently:\", error);\n      showMessage('Failed to acquire token. Please try again.', 'error');\n      throw error;\n    }\n  };\n\n  // --- SharePoint API (Microsoft Graph) Integration (Conceptual) ---\n  // These functions are now *ready* to make actual API calls using the accessToken.\n\n  /**\n   * Reads the content of a file from SharePoint using Microsoft Graph API.\n   * @param {object} file The file object (must have 'id' and 'name').\n   * @param {string} currentFolder The current folder the file is in.\n   * @returns {Promise<string>} A promise that resolves with the file content.\n   */\n  const readFileContent = async (file, currentFolder) => {\n    try {\n      const accessToken = await getAccessToken(); // Acquire token for Graph API call\n      console.log(`Attempting to read content of \"${file.name}\" from \"${currentFolder}\" with real token.`);\n\n      // --- IMPORTANT: Replace with actual Microsoft Graph API call ---\n      // You'll need the Site ID and Drive ID (document library ID)\n      // Example:\n      // const siteId = \"YOUR_SHAREPOINT_SITE_ID\";\n      // const driveId = \"YOUR_SHAREPOINT_DRIVE_ID\";\n      // const response = await fetch(`https://graph.microsoft.com/v1.0/sites/${siteId}/drives/${driveId}/items/${file.id}/content`, {\n      //   headers: { 'Authorization': `Bearer ${accessToken}` }\n      // });\n      // if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n      // const content = await response.text();\n      // return content;\n\n      // Current Simulation:\n      const folderFiles = folders[currentFolder];\n      const foundFile = folderFiles.find(f => f.id === file.id);\n      return foundFile ? foundFile.content : 'Simulated content (replace with actual Graph API call)';\n    } catch (error) {\n      console.error(\"Error reading file content from SharePoint:\", error);\n      showMessage('Failed to read file content.', 'error');\n      throw error;\n    }\n  };\n\n  /**\n   * Updates a file's name and/or content in SharePoint using Microsoft Graph API.\n   * @param {string} fileId The ID of the file to update.\n   * @param {string} currentFolder The current folder of the file.\n   * @param {string} newName The new name for the file (optional).\n   * @param {string} newContent The new content for the file (optional).\n   * @returns {Promise<boolean>} A promise that resolves to true on success.\n   */\n  const updateFile = async (fileId, currentFolder, newName, newContent) => {\n    try {\n      const accessToken = await getAccessToken(); // Acquire token\n      console.log(`Attempting to update file ID \"${fileId}\" in \"${currentFolder}\" with real token.`);\n\n      // --- IMPORTANT: Replace with actual Microsoft Graph API calls ---\n      // You'll need the Site ID and Drive ID (document library ID)\n      // Example for renaming:\n      const siteId = \"YOUR_SHAREPOINT_SITE_ID\";\n      // const driveId = \"YOUR_SHAREPOINT_DRIVE_ID\";\n      // if (newName !== undefined) {\n      //   const renameResponse = await fetch(`https://graph.microsoft.com/v1.0/sites/${siteId}/drives/${driveId}/items/${fileId}`, {\n      //     method: 'PATCH',\n      //     headers: {\n      //       'Authorization': `Bearer ${accessToken}`,\n      //       'Content-Type': 'application/json'\n      //     },\n      //     body: JSON.stringify({ name: newName })\n      //   });\n      //   if (!renameResponse.ok) throw new Error(`Rename failed: ${renameResponse.status}`);\n      // }\n      // Example for updating content:\n      // if (newContent !== undefined) {\n      //   const contentResponse = await fetch(`https://graph.microsoft.com/v1.0/sites/${siteId}/drives/${driveId}/items/${fileId}/content`, {\n      //     method: 'PUT',\n      //     headers: {\n      //       'Authorization': `Bearer ${accessToken}`,\n      //       'Content-Type': 'text/plain' // Adjust content type for XLSX\n      //     },\n      //     body: newContent\n      //   });\n      //   if (!contentResponse.ok) throw new Error(`Content update failed: ${contentResponse.status}`);\n      // }\n\n      // Current Simulation:\n      setFolders(prevFolders => {\n        const updatedFolder = prevFolders[currentFolder].map(file => {\n          if (file.id === fileId) {\n            return {\n              ...file,\n              name: newName !== undefined ? newName : file.name,\n              content: newContent !== undefined ? newContent : file.content\n            };\n          }\n          return file;\n        });\n        return {\n          ...prevFolders,\n          [currentFolder]: updatedFolder\n        };\n      });\n      return true;\n    } catch (error) {\n      console.error(\"Error updating file in SharePoint:\", error);\n      showMessage('Failed to update file.', 'error');\n      throw error;\n    }\n  };\n\n  /**\n   * Moves a file from one folder to another in SharePoint using Microsoft Graph API.\n   * @param {string} fileId The ID of the file to move.\n   * @param {string} sourceFolder The name of the source folder.\n   * @param {string} destinationFolder The name of the destination folder.\n   * @returns {Promise<boolean>} A promise that resolves to true on success.\n   */\n  const moveFile = async (fileId, sourceFolder, destinationFolder) => {\n    try {\n      const accessToken = await getAccessToken(); // Acquire token\n      console.log(`Attempting to move file ID \"${fileId}\" from \"${sourceFolder}\" to \"${destinationFolder}\" with real token.`);\n\n      // --- IMPORTANT: Replace with actual Microsoft Graph API call ---\n      // You'll need the Site ID, Drive ID, and the Item ID of the destination folder.\n      // Example:\n      // const siteId = \"YOUR_SHAREPOINT_SITE_ID\";\n      // const driveId = \"YOUR_SHAREPOINT_DRIVE_ID\";\n      // const destinationFolderItemId = \"YOUR_APPROVED_INVOICES_FOLDER_ITEM_ID\"; // Get this via Graph API or hardcode if stable\n\n      // const response = await fetch(`https://graph.microsoft.com/v1.0/sites/${siteId}/drives/${driveId}/items/${file.id}`, {\n      //   method: 'PATCH',\n      //   headers: {\n      //     'Authorization': `Bearer ${accessToken}`,\n      //     'Content-Type': 'application/json'\n      //   },\n      //   body: JSON.stringify({\n      //     parentReference: {\n      //       id: destinationFolderItemId // This is the ITEM ID of the destination folder itself\n      //     }\n      //   })\n      // });\n      // if (!response.ok) throw new Error(`Move failed: ${response.status}`);\n\n      // Current Simulation:\n      setFolders(prevFolders => {\n        const fileToMove = prevFolders[sourceFolder].find(file => file.id === fileId);\n        if (!fileToMove) return prevFolders;\n        const updatedSourceFolder = prevFolders[sourceFolder].filter(file => file.id !== fileId);\n        const updatedDestinationFolder = [...(prevFolders[destinationFolder] || []), fileToMove];\n        return {\n          ...prevFolders,\n          [sourceFolder]: updatedSourceFolder,\n          [destinationFolder]: updatedDestinationFolder\n        };\n      });\n      return true;\n    } catch (error) {\n      console.error(\"Error moving file in SharePoint:\", error);\n      showMessage('Failed to move file.', 'error');\n      throw error;\n    }\n  };\n\n  // --- UI Event Handlers (passed down as props) ---\n  const handleEditClick = async (file, currentFolder) => {\n    setSelectedFile(file);\n    setEditedFileName(file.name);\n    try {\n      const content = await readFileContent(file, currentFolder);\n      setEditedFileContent(content);\n      setIsEditModalOpen(true);\n    } catch (error) {\n      console.error(\"Failed to load file content for editing:\", error);\n      showMessage('Could not load file content for editing.', 'error');\n    }\n  };\n  const handleSaveEdit = async () => {\n    if (selectedFile) {\n      try {\n        await updateFile(selectedFile.id, 'Incoming Invoices', editedFileName, editedFileContent);\n        showMessage('File saved successfully!', 'success');\n        setIsEditModalOpen(false);\n        setSelectedFile(null);\n      } catch (error) {\n        console.error(\"Error saving file:\", error);\n        showMessage('Failed to save file.', 'error');\n      }\n    }\n  };\n  const handleApprove = async fileId => {\n    try {\n      await moveFile(fileId, 'Incoming Invoices', 'Approved Invoices');\n      showMessage('Invoice approved and moved!', 'success');\n    } catch (error) {\n      console.error(\"Error approving invoice:\", error);\n      showMessage('Failed to approve invoice.', 'error');\n    }\n  };\n  const handleView = async (file, currentFolder) => {\n    setSelectedFile(file);\n    try {\n      const content = await readFileContent(file, currentFolder);\n      setEditedFileContent(content);\n      setIsViewModalOpen(true);\n    } catch (error) {\n      console.error(\"Failed to load file content for viewing:\", error);\n      showMessage('Could not load file content for viewing.', 'error');\n    }\n  };\n\n  // --- Main App Rendering ---\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"relative min-h-screen flex flex-col\",\n    children: [message.text && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `fixed top-4 right-4 p-3 rounded-lg shadow-lg z-50 ${message.type === 'success' ? 'bg-green-500 text-white' : 'bg-red-500 text-white'}`,\n      children: message.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"flex-grow\",\n      children: !isAuthenticated ?\n      /*#__PURE__*/\n      // Render LoginPage if not authenticated\n      _jsxDEV(LoginPage, {\n        onLogin: handleMicrosoftLogin\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 11\n      }, this) :\n      /*#__PURE__*/\n      // Render authenticated pages\n      _jsxDEV(_Fragment, {\n        children: [currentPage === 'dashboard' && /*#__PURE__*/_jsxDEV(DashboardPage, {\n          userProfile: userProfile,\n          folders: folders,\n          setCurrentPage: setCurrentPage,\n          onLogout: handleLogout\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 15\n        }, this), currentPage === 'incomingInvoices' && /*#__PURE__*/_jsxDEV(IncomingInvoicesPage, {\n          files: folders['Incoming Invoices'],\n          setCurrentPage: setCurrentPage,\n          onEdit: handleEditClick,\n          onApprove: handleApprove,\n          onView: handleView\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 15\n        }, this), currentPage === 'publishedDocuments' && /*#__PURE__*/_jsxDEV(PublishedDocumentsPage, {\n          files: folders['Published Documents'],\n          setCurrentPage: setCurrentPage,\n          onView: handleView\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EditFileModal, {\n      isOpen: isEditModalOpen,\n      onClose: () => setIsEditModalOpen(false),\n      fileName: editedFileName,\n      onFileNameChange: e => setEditedFileName(e.target.value),\n      fileContent: editedFileContent,\n      onFileContentChange: e => setEditedFileContent(e.target.value),\n      onSave: handleSaveEdit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ViewFileModal, {\n      isOpen: isViewModalOpen,\n      onClose: () => setIsViewModalOpen(false),\n      fileName: (selectedFile === null || selectedFile === void 0 ? void 0 : selectedFile.name) || '',\n      fileContent: editedFileContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"text-center text-gray-500 mt-auto py-4 text-sm bg-gray-50 w-full border-t border-gray-200\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\xA9 2024 Invoice System. All rights reserved. \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-xs mt-2\",\n        children: \"Note: This application uses simulated SharePoint interactions; integrate with Microsoft Graph API for real functionality.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 342,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"uFRnz1UwnBi7R+SSUSgb4WFG9ek=\", false, function () {\n  return [useMsal, useIsAuthenticated];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useMsal","useIsAuthenticated","InteractionRequiredAuthError","loginRequest","LoginPage","DashboardPage","IncomingInvoicesPage","PublishedDocumentsPage","EditFileModal","ViewFileModal","X","FileText","FileSpreadsheet","Eye","Pencil","CheckCircle","FolderOpen","LogIn","LayoutDashboard","ListTodo","FileBarChart","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","instance","accounts","isAuthenticated","currentPage","setCurrentPage","userProfile","length","folders","setFolders","id","name","type","content","selectedFile","setSelectedFile","isEditModalOpen","setIsEditModalOpen","isViewModalOpen","setIsViewModalOpen","editedFileName","setEditedFileName","editedFileContent","setEditedFileContent","message","setMessage","text","messageTimeoutRef","showMessage","current","clearTimeout","setTimeout","handleMicrosoftLogin","loginPopup","error","console","handleLogout","logoutPopup","getAccessToken","Error","response","acquireTokenSilent","account","accessToken","warn","acquireTokenPopup","popupError","readFileContent","file","currentFolder","log","folderFiles","foundFile","find","f","updateFile","fileId","newName","newContent","siteId","prevFolders","updatedFolder","map","undefined","moveFile","sourceFolder","destinationFolder","fileToMove","updatedSourceFolder","filter","updatedDestinationFolder","handleEditClick","handleSaveEdit","handleApprove","handleView","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onLogin","onLogout","files","onEdit","onApprove","onView","isOpen","onClose","onFileNameChange","e","target","value","fileContent","onFileContentChange","onSave","_c","$RefreshReg$"],"sources":["/workspaces/InvoiceApp/src/App.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\n// Import MSAL hooks\nimport { useMsal, useIsAuthenticated } from '@azure/msal-react';\nimport { InteractionRequiredAuthError } from '@azure/msal-browser';\n\n// Import your MSAL configuration for login requests\nimport { loginRequest } from './authConfig'; // Ensure authConfig.js is in the same directory as App.js or adjust path\n\n// Import Page Components from the './pages/' directory\nimport LoginPage from './pages/LoginPage'; // Ensure LoginPage.js exists in src/pages\nimport DashboardPage from './pages/DashboardPage'; // Ensure DashboardPage.js exists in src/pages\nimport IncomingInvoicesPage from './pages/IncomingInvoicePage'; // Ensure IncomingInvoicesPage.js exists in src/pages\nimport PublishedDocumentsPage from './pages/PublishedDocumentsPage'; // Ensure PublishedDocumentsPage.js exists in src/pages\n\n// Import Reusable Component Modals from the './components/' directory\nimport EditFileModal from './components/EditFileModal'; // Ensure EditFileModal.js exists in src/components\nimport ViewFileModal from './components/ViewFileModal'; // Ensure ViewFileModal.js exists in src/components\n\n// Import icons\nimport {\n  X, FileText, FileSpreadsheet, Eye, Pencil, CheckCircle, FolderOpen, LogIn, LayoutDashboard, ListTodo, FileBarChart\n} from 'lucide-react';\n\n\nfunction App() {\n  // MSAL hooks for authentication state and instance management\n  const { instance, accounts } = useMsal();\n  const isAuthenticated = useIsAuthenticated();\n\n  // --- Global State Management ---\n  // If not authenticated, always start on the 'login' page.\n  // If authenticated, determine current page based on userProfile (or saved preference, if any).\n  // For simplicity, we'll set it to 'dashboard' if authenticated.\n  const [currentPage, setCurrentPage] = useState(isAuthenticated ? 'dashboard' : 'login');\n  \n  // userProfile will now be derived from MSAL's accounts array\n  const userProfile = isAuthenticated && accounts.length > 0 ? accounts[0] : null;\n\n  // Simulated SharePoint folder and file data\n  const [folders, setFolders] = useState({\n    'Incoming Invoices': [\n      { id: 'inv-001.xlsx', name: 'invoice-001.xlsx', type: 'xlsx', content: 'Invoice 001 data for approval...' },\n      { id: 'inv-002.xlsx', name: 'invoice-002.xlsx', type: 'xlsx', content: 'Invoice 002 data for approval...' },\n      { id: 'inv-003.xlsx', name: 'invoice-003.xlsx', type: 'xlsx', content: 'Invoice 003 data for approval...' },\n    ],\n    'Approved Invoices': [ \n      { id: 'inv-004.xlsx', name: 'invoice-004.xlsx', type: 'xlsx', content: 'Invoice 004 data (approved example)...' },\n    ],\n    'Published Documents': [\n      { id: 'doc-report-q1.pdf', name: 'report-Q1.pdf', type: 'pdf', content: 'Quarterly Report Q1 2024 content...' },\n      { id: 'doc-summary-2023.xlsx', name: 'summary-2023.xlsx', type: 'xlsx', content: 'Yearly Summary 2023 data...' },\n      { id: 'doc-policy-update.pdf', name: 'policy-update.pdf', type: 'pdf', content: 'Company Policy Update content...' },\n    ],\n  });\n\n  // State for file editing and viewing modals\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [isViewModalOpen, setIsViewModalOpen] = useState(false);\n  const [editedFileName, setEditedFileName] = useState('');\n  const [editedFileContent, setEditedFileContent] = useState('');\n  \n  // State for global success/error messages\n  const [message, setMessage] = useState({ text: '', type: '' });\n  const messageTimeoutRef = useRef(null);\n\n  // Function to show a temporary message\n  const showMessage = (text, type = 'success') => {\n    setMessage({ text, type });\n    if (messageTimeoutRef.current) {\n      clearTimeout(messageTimeoutRef.current);\n    }\n    messageTimeoutRef.current = setTimeout(() => {\n      setMessage({ text: '', type: '' });\n    }, 3000);\n  };\n\n  // --- Microsoft Authentication Functions ---\n  const handleMicrosoftLogin = async () => {\n    try {\n      // Initiates the login process via a pop-up window\n      await instance.loginPopup(loginRequest);\n      // If login is successful, useIsAuthenticated will update, and App will re-render\n      setCurrentPage('dashboard'); // Navigate to dashboard on successful login\n      showMessage('Logged in successfully!', 'success');\n    } catch (error) {\n      console.error(\"Microsoft login failed:\", error);\n      showMessage('Login failed. Please try again.', 'error');\n    }\n  };\n\n  const handleLogout = () => {\n    // Logs out the user from MSAL and redirects to login page\n    instance.logoutPopup(); // or logoutRedirect()\n    setCurrentPage('login'); // Set page state manually to login immediately\n    showMessage('Logged out successfully.', 'success');\n  };\n\n  /**\n   * Acquires an access token silently using MSAL.js.\n   * This token is then used to authenticate requests to Microsoft Graph API.\n   * @returns {Promise<string>} A promise that resolves with the access token.\n   */\n  const getAccessToken = async () => {\n    if (accounts.length === 0) {\n      throw new Error(\"No active account found. Please login.\");\n    }\n    try {\n      // Attempt to acquire token silently first\n      const response = await instance.acquireTokenSilent({\n        ...loginRequest,\n        account: accounts[0]\n      });\n      return response.accessToken;\n    } catch (error) {\n      // If silent acquisition fails (e.g., AAD requires re-authentication),\n      // prompt user to interactively re-authenticate.\n      if (error instanceof InteractionRequiredAuthError) {\n        console.warn(\"Interaction required to acquire token. Attempting popup...\");\n        try {\n          const response = await instance.acquireTokenPopup(loginRequest);\n          return response.accessToken;\n        } catch (popupError) {\n          console.error(\"Error acquiring token via popup:\", popupError);\n          showMessage('Authentication required. Please log in again.', 'error');\n          handleLogout(); // Force logout if re-auth fails\n          throw popupError;\n        }\n      }\n      console.error(\"Error acquiring token silently:\", error);\n      showMessage('Failed to acquire token. Please try again.', 'error');\n      throw error;\n    }\n  };\n\n  // --- SharePoint API (Microsoft Graph) Integration (Conceptual) ---\n  // These functions are now *ready* to make actual API calls using the accessToken.\n\n  /**\n   * Reads the content of a file from SharePoint using Microsoft Graph API.\n   * @param {object} file The file object (must have 'id' and 'name').\n   * @param {string} currentFolder The current folder the file is in.\n   * @returns {Promise<string>} A promise that resolves with the file content.\n   */\n  const readFileContent = async (file, currentFolder) => {\n    try {\n      const accessToken = await getAccessToken(); // Acquire token for Graph API call\n      console.log(`Attempting to read content of \"${file.name}\" from \"${currentFolder}\" with real token.`);\n\n      // --- IMPORTANT: Replace with actual Microsoft Graph API call ---\n      // You'll need the Site ID and Drive ID (document library ID)\n      // Example:\n      // const siteId = \"YOUR_SHAREPOINT_SITE_ID\";\n      // const driveId = \"YOUR_SHAREPOINT_DRIVE_ID\";\n      // const response = await fetch(`https://graph.microsoft.com/v1.0/sites/${siteId}/drives/${driveId}/items/${file.id}/content`, {\n      //   headers: { 'Authorization': `Bearer ${accessToken}` }\n      // });\n      // if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n      // const content = await response.text();\n      // return content;\n\n      // Current Simulation:\n      const folderFiles = folders[currentFolder];\n      const foundFile = folderFiles.find(f => f.id === file.id);\n      return foundFile ? foundFile.content : 'Simulated content (replace with actual Graph API call)';\n    } catch (error) {\n      console.error(\"Error reading file content from SharePoint:\", error);\n      showMessage('Failed to read file content.', 'error');\n      throw error;\n    }\n  };\n\n  /**\n   * Updates a file's name and/or content in SharePoint using Microsoft Graph API.\n   * @param {string} fileId The ID of the file to update.\n   * @param {string} currentFolder The current folder of the file.\n   * @param {string} newName The new name for the file (optional).\n   * @param {string} newContent The new content for the file (optional).\n   * @returns {Promise<boolean>} A promise that resolves to true on success.\n   */\n  const updateFile = async (fileId, currentFolder, newName, newContent) => {\n    try {\n      const accessToken = await getAccessToken(); // Acquire token\n      console.log(`Attempting to update file ID \"${fileId}\" in \"${currentFolder}\" with real token.`);\n\n      // --- IMPORTANT: Replace with actual Microsoft Graph API calls ---\n      // You'll need the Site ID and Drive ID (document library ID)\n      // Example for renaming:\n      const siteId = \"YOUR_SHAREPOINT_SITE_ID\";\n      // const driveId = \"YOUR_SHAREPOINT_DRIVE_ID\";\n      // if (newName !== undefined) {\n      //   const renameResponse = await fetch(`https://graph.microsoft.com/v1.0/sites/${siteId}/drives/${driveId}/items/${fileId}`, {\n      //     method: 'PATCH',\n      //     headers: {\n      //       'Authorization': `Bearer ${accessToken}`,\n      //       'Content-Type': 'application/json'\n      //     },\n      //     body: JSON.stringify({ name: newName })\n      //   });\n      //   if (!renameResponse.ok) throw new Error(`Rename failed: ${renameResponse.status}`);\n      // }\n      // Example for updating content:\n      // if (newContent !== undefined) {\n      //   const contentResponse = await fetch(`https://graph.microsoft.com/v1.0/sites/${siteId}/drives/${driveId}/items/${fileId}/content`, {\n      //     method: 'PUT',\n      //     headers: {\n      //       'Authorization': `Bearer ${accessToken}`,\n      //       'Content-Type': 'text/plain' // Adjust content type for XLSX\n      //     },\n      //     body: newContent\n      //   });\n      //   if (!contentResponse.ok) throw new Error(`Content update failed: ${contentResponse.status}`);\n      // }\n\n      // Current Simulation:\n      setFolders(prevFolders => {\n        const updatedFolder = prevFolders[currentFolder].map(file => {\n          if (file.id === fileId) {\n            return {\n              ...file,\n              name: newName !== undefined ? newName : file.name,\n              content: newContent !== undefined ? newContent : file.content,\n            };\n          }\n          return file;\n        });\n        return { ...prevFolders, [currentFolder]: updatedFolder };\n      });\n      return true;\n    } catch (error) {\n      console.error(\"Error updating file in SharePoint:\", error);\n      showMessage('Failed to update file.', 'error');\n      throw error;\n    }\n  };\n\n  /**\n   * Moves a file from one folder to another in SharePoint using Microsoft Graph API.\n   * @param {string} fileId The ID of the file to move.\n   * @param {string} sourceFolder The name of the source folder.\n   * @param {string} destinationFolder The name of the destination folder.\n   * @returns {Promise<boolean>} A promise that resolves to true on success.\n   */\n  const moveFile = async (fileId, sourceFolder, destinationFolder) => {\n    try {\n      const accessToken = await getAccessToken(); // Acquire token\n      console.log(`Attempting to move file ID \"${fileId}\" from \"${sourceFolder}\" to \"${destinationFolder}\" with real token.`);\n\n      // --- IMPORTANT: Replace with actual Microsoft Graph API call ---\n      // You'll need the Site ID, Drive ID, and the Item ID of the destination folder.\n      // Example:\n      // const siteId = \"YOUR_SHAREPOINT_SITE_ID\";\n      // const driveId = \"YOUR_SHAREPOINT_DRIVE_ID\";\n      // const destinationFolderItemId = \"YOUR_APPROVED_INVOICES_FOLDER_ITEM_ID\"; // Get this via Graph API or hardcode if stable\n\n      // const response = await fetch(`https://graph.microsoft.com/v1.0/sites/${siteId}/drives/${driveId}/items/${file.id}`, {\n      //   method: 'PATCH',\n      //   headers: {\n      //     'Authorization': `Bearer ${accessToken}`,\n      //     'Content-Type': 'application/json'\n      //   },\n      //   body: JSON.stringify({\n      //     parentReference: {\n      //       id: destinationFolderItemId // This is the ITEM ID of the destination folder itself\n      //     }\n      //   })\n      // });\n      // if (!response.ok) throw new Error(`Move failed: ${response.status}`);\n\n      // Current Simulation:\n      setFolders(prevFolders => {\n        const fileToMove = prevFolders[sourceFolder].find(file => file.id === fileId);\n        if (!fileToMove) return prevFolders;\n        const updatedSourceFolder = prevFolders[sourceFolder].filter(file => file.id !== fileId);\n        const updatedDestinationFolder = [...(prevFolders[destinationFolder] || []), fileToMove];\n        return {\n          ...prevFolders,\n          [sourceFolder]: updatedSourceFolder,\n          [destinationFolder]: updatedDestinationFolder,\n        };\n      });\n      return true;\n    } catch (error) {\n      console.error(\"Error moving file in SharePoint:\", error);\n      showMessage('Failed to move file.', 'error');\n      throw error;\n    }\n  };\n\n  // --- UI Event Handlers (passed down as props) ---\n  const handleEditClick = async (file, currentFolder) => {\n    setSelectedFile(file);\n    setEditedFileName(file.name);\n    try {\n      const content = await readFileContent(file, currentFolder);\n      setEditedFileContent(content);\n      setIsEditModalOpen(true);\n    } catch (error) {\n      console.error(\"Failed to load file content for editing:\", error);\n      showMessage('Could not load file content for editing.', 'error');\n    }\n  };\n\n  const handleSaveEdit = async () => {\n    if (selectedFile) {\n      try {\n        await updateFile(selectedFile.id, 'Incoming Invoices', editedFileName, editedFileContent);\n        showMessage('File saved successfully!', 'success');\n        setIsEditModalOpen(false);\n        setSelectedFile(null);\n      } catch (error) {\n        console.error(\"Error saving file:\", error);\n        showMessage('Failed to save file.', 'error');\n      }\n    }\n  };\n\n  const handleApprove = async (fileId) => {\n    try {\n      await moveFile(fileId, 'Incoming Invoices', 'Approved Invoices');\n      showMessage('Invoice approved and moved!', 'success');\n    } catch (error) {\n      console.error(\"Error approving invoice:\", error);\n      showMessage('Failed to approve invoice.', 'error');\n    }\n  };\n\n  const handleView = async (file, currentFolder) => {\n    setSelectedFile(file);\n    try {\n      const content = await readFileContent(file, currentFolder);\n      setEditedFileContent(content);\n      setIsViewModalOpen(true);\n    } catch (error) {\n      console.error(\"Failed to load file content for viewing:\", error);\n      showMessage('Could not load file content for viewing.', 'error');\n    }\n  };\n\n  // --- Main App Rendering ---\n  return (\n    <div className=\"relative min-h-screen flex flex-col\">\n      {/* Global Message component */}\n      {message.text && (\n        <div className={`fixed top-4 right-4 p-3 rounded-lg shadow-lg z-50 ${message.type === 'success' ? 'bg-green-500 text-white' : 'bg-red-500 text-white'}`}>\n          {message.text}\n        </div>\n      )}\n\n      {/* Conditional rendering of pages based on authentication and currentPage state */}\n      <main className=\"flex-grow\">\n        {!isAuthenticated ? (\n          // Render LoginPage if not authenticated\n          <LoginPage onLogin={handleMicrosoftLogin} />\n        ) : (\n          // Render authenticated pages\n          <>\n            {currentPage === 'dashboard' && (\n              <DashboardPage\n                userProfile={userProfile}\n                folders={folders}\n                setCurrentPage={setCurrentPage}\n                onLogout={handleLogout}\n              />\n            )}\n            {currentPage === 'incomingInvoices' && (\n              <IncomingInvoicesPage\n                files={folders['Incoming Invoices']}\n                setCurrentPage={setCurrentPage}\n                onEdit={handleEditClick}\n                onApprove={handleApprove}\n                onView={handleView}\n              />\n            )}\n            {currentPage === 'publishedDocuments' && (\n              <PublishedDocumentsPage\n                files={folders['Published Documents']}\n                setCurrentPage={setCurrentPage}\n                onView={handleView}\n              />\n            )}\n          </>\n        )}\n      </main>\n\n      {/* Modals are rendered here as they are shared and controlled by App.js state */}\n      <EditFileModal\n        isOpen={isEditModalOpen}\n        onClose={() => setIsEditModalOpen(false)}\n        fileName={editedFileName}\n        onFileNameChange={(e) => setEditedFileName(e.target.value)}\n        fileContent={editedFileContent}\n        onFileContentChange={(e) => setEditedFileContent(e.target.value)}\n        onSave={handleSaveEdit}\n      />\n      <ViewFileModal\n        isOpen={isViewModalOpen}\n        onClose={() => setIsViewModalOpen(false)}\n        fileName={selectedFile?.name || ''}\n        fileContent={editedFileContent}\n      />\n\n      {/* Global Footer */}\n      <footer className=\"text-center text-gray-500 mt-auto py-4 text-sm bg-gray-50 w-full border-t border-gray-200\">\n        <p>&copy; 2024 Invoice System. All rights reserved. </p>\n        <p className=\"text-xs mt-2\">\n          Note: This application uses simulated SharePoint interactions; integrate with Microsoft Graph API for real functionality.\n        </p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}