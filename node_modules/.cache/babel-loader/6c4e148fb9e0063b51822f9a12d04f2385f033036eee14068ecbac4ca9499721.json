{"ast":null,"code":"// src/services/sharepointService.js\nimport{SHAREPOINT_SITE_ID,SHAREPOINT_DRIVE_ID}from'../utils/constants';import{loginRequest}from'../authConfig';import{InteractionRequiredAuthError}from'@azure/msal-browser';/**\n * Acquires an access token from MSAL, handling interactive popups if needed.\n * This is the single source of truth for getting a token.\n */export const getAccessToken=async(instance,accounts)=>{if(!instance||!accounts||accounts.length===0){throw new Error(\"MSAL instance or accounts not available.\");}const request={...loginRequest,account:accounts[0]};try{const response=await instance.acquireTokenSilent(request);return response.accessToken;}catch(error){if(error instanceof InteractionRequiredAuthError){const response=await instance.acquireTokenPopup(request);return response.accessToken;}throw error;}};/**\n * Fetches the list of files from a specific SharePoint folder.\n * @param {string} accessToken - The authenticated access token.\n * @param {string} folderId - The ID of the SharePoint folder.\n * @returns {Promise<Array>} A promise that resolves to an array of file items.\n */export const fetchFilesFromFolder=async(accessToken,folderId)=>{const url=`https://graph.microsoft.com/v1.0/sites/${SHAREPOINT_SITE_ID}/drives/${SHAREPOINT_DRIVE_ID}/items/${folderId}/children`;const response=await fetch(url,{headers:{'Authorization':`Bearer ${accessToken}`}});if(!response.ok)throw new Error(`Failed to fetch files from folder ${folderId}`);const data=await response.json();// Map to a consistent file object format\nreturn data.value.filter(item=>item.file)// Ensure we only process files, not folders\n.map(item=>({id:item.id,name:item.name,webUrl:item.webUrl,downloadUrl:item[\"@microsoft.graph.downloadUrl\"],createdDateTime:item.createdDateTime,type:item.name.toLowerCase().endsWith('.xlsx')?'xlsx':'pdf'// Simple type detection\n}));};/**\n * Moves a file from one SharePoint folder to another.\n * @param {string} accessToken - The authenticated access token.\n * @param {string} fileId - The ID of the file to move.\n * @param {string} destinationFolderId - The ID of the target folder.\n */export const moveFile=async(accessToken,fileId,destinationFolderId)=>{const url=`https://graph.microsoft.com/v1.0/sites/${SHAREPOINT_SITE_ID}/drives/${SHAREPOINT_DRIVE_ID}/items/${fileId}`;const body={parentReference:{id:destinationFolderId}};const response=await fetch(url,{method:'PATCH',headers:{'Authorization':`Bearer ${accessToken}`,'Content-Type':'application/json'},body:JSON.stringify(body)});if(!response.ok)throw new Error('Failed to move file.');};/**\n * Downloads the content of a file. For PDFs, it returns a blob URL.\n * @param {string} accessToken - The authenticated access token.\n * @param {object} file - The file object, containing its downloadUrl.\n * @returns {Promise<string>} A promise that resolves to the file content or a blob URL.\n */export const downloadFileContent=async(accessToken,file)=>{if(!file.downloadUrl)throw new Error(\"File has no download URL.\");const response=await fetch(file.downloadUrl,{headers:{'Authorization':`Bearer ${accessToken}`}});if(!response.ok)throw new Error('Failed to download file content.');// For PDFs and other viewable types, create a blob URL to render in an iframe\nif(file.type==='pdf'){const blob=await response.blob();return URL.createObjectURL(blob);}// For other types, you might return text or handle differently\nreturn await response.text();};","map":{"version":3,"names":["SHAREPOINT_SITE_ID","SHAREPOINT_DRIVE_ID","loginRequest","InteractionRequiredAuthError","getAccessToken","instance","accounts","length","Error","request","account","response","acquireTokenSilent","accessToken","error","acquireTokenPopup","fetchFilesFromFolder","folderId","url","fetch","headers","ok","data","json","value","filter","item","file","map","id","name","webUrl","downloadUrl","createdDateTime","type","toLowerCase","endsWith","moveFile","fileId","destinationFolderId","body","parentReference","method","JSON","stringify","downloadFileContent","blob","URL","createObjectURL","text"],"sources":["/workspaces/InvoiceApp/src/services/sharepointService.js"],"sourcesContent":["// src/services/sharepointService.js\nimport { SHAREPOINT_SITE_ID, SHAREPOINT_DRIVE_ID } from '../utils/constants';\nimport { loginRequest } from '../authConfig';\nimport { InteractionRequiredAuthError } from '@azure/msal-browser';\n\n/**\n * Acquires an access token from MSAL, handling interactive popups if needed.\n * This is the single source of truth for getting a token.\n */\nexport const getAccessToken = async (instance, accounts) => {\n  if (!instance || !accounts || accounts.length === 0) {\n    throw new Error(\"MSAL instance or accounts not available.\");\n  }\n  const request = { ...loginRequest, account: accounts[0] };\n\n  try {\n    const response = await instance.acquireTokenSilent(request);\n    return response.accessToken;\n  } catch (error) {\n    if (error instanceof InteractionRequiredAuthError) {\n      const response = await instance.acquireTokenPopup(request);\n      return response.accessToken;\n    }\n    throw error;\n  }\n};\n\n/**\n * Fetches the list of files from a specific SharePoint folder.\n * @param {string} accessToken - The authenticated access token.\n * @param {string} folderId - The ID of the SharePoint folder.\n * @returns {Promise<Array>} A promise that resolves to an array of file items.\n */\nexport const fetchFilesFromFolder = async (accessToken, folderId) => {\n  const url = `https://graph.microsoft.com/v1.0/sites/${SHAREPOINT_SITE_ID}/drives/${SHAREPOINT_DRIVE_ID}/items/${folderId}/children`;\n  \n  const response = await fetch(url, {\n    headers: { 'Authorization': `Bearer ${accessToken}` }\n  });\n\n  if (!response.ok) throw new Error(`Failed to fetch files from folder ${folderId}`);\n  \n  const data = await response.json();\n  // Map to a consistent file object format\n  return data.value\n    .filter(item => item.file) // Ensure we only process files, not folders\n    .map(item => ({\n      id: item.id,\n      name: item.name,\n      webUrl: item.webUrl,\n      downloadUrl: item[\"@microsoft.graph.downloadUrl\"],\n      createdDateTime: item.createdDateTime,\n      type: item.name.toLowerCase().endsWith('.xlsx') ? 'xlsx' : 'pdf', // Simple type detection\n    }));\n};\n\n/**\n * Moves a file from one SharePoint folder to another.\n * @param {string} accessToken - The authenticated access token.\n * @param {string} fileId - The ID of the file to move.\n * @param {string} destinationFolderId - The ID of the target folder.\n */\nexport const moveFile = async (accessToken, fileId, destinationFolderId) => {\n  const url = `https://graph.microsoft.com/v1.0/sites/${SHAREPOINT_SITE_ID}/drives/${SHAREPOINT_DRIVE_ID}/items/${fileId}`;\n  \n  const body = {\n    parentReference: { id: destinationFolderId }\n  };\n\n  const response = await fetch(url, {\n    method: 'PATCH',\n    headers: {\n      'Authorization': `Bearer ${accessToken}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  });\n\n  if (!response.ok) throw new Error('Failed to move file.');\n};\n\n/**\n * Downloads the content of a file. For PDFs, it returns a blob URL.\n * @param {string} accessToken - The authenticated access token.\n * @param {object} file - The file object, containing its downloadUrl.\n * @returns {Promise<string>} A promise that resolves to the file content or a blob URL.\n */\nexport const downloadFileContent = async (accessToken, file) => {\n  if (!file.downloadUrl) throw new Error(\"File has no download URL.\");\n\n  const response = await fetch(file.downloadUrl, {\n    headers: { 'Authorization': `Bearer ${accessToken}` }\n  });\n\n  if (!response.ok) throw new Error('Failed to download file content.');\n\n  // For PDFs and other viewable types, create a blob URL to render in an iframe\n  if (file.type === 'pdf') {\n      const blob = await response.blob();\n      return URL.createObjectURL(blob);\n  }\n\n  // For other types, you might return text or handle differently\n  return await response.text();\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}