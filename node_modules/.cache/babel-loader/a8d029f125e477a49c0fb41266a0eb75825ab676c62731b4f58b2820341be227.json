{"ast":null,"code":"var _jsxFileName = \"/workspaces/InvoiceApp/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useCallback } from 'react'; // Added useEffect and useCallback\n// Import MSAL hooks\nimport { useMsal, useIsAuthenticated } from '@azure/msal-react';\nimport { InteractionRequiredAuthError } from '@azure/msal-browser';\n\n// Import your MSAL configuration for login requests\nimport { loginRequest } from './authConfig';\n\n// Import Page Components\nimport LoginPage from './pages/LoginPage';\nimport DashboardPage from './pages/DashboardPage';\nimport IncomingInvoicesPage from './pages/IncomingInvoicesPage';\nimport PublishedDocumentsPage from './pages/PublishedDocumentsPage';\n\n// Import Reusable Component Modals\nimport EditFileModal from './components/EditFileModal';\nimport ViewFileModal from './components/ViewFileModal';\n\n// Import icons\nimport { X, FileText, FileSpreadsheet, Eye, Pencil, CheckCircle, FolderOpen, LogIn, LayoutDashboard, ListTodo, FileBarChart } from 'lucide-react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // MSAL hooks for authentication state and instance management\n  const {\n    instance,\n    accounts\n  } = useMsal();\n  const isAuthenticated = useIsAuthenticated();\n\n  // --- Global State Management ---\n  const [currentPage, setCurrentPage] = useState(isAuthenticated ? 'dashboard' : 'login');\n  const userProfile = isAuthenticated && accounts.length > 0 ? accounts[0] : null;\n\n  // Initial state for folders is empty; content will be fetched from SharePoint\n  const [folders, setFolders] = useState({\n    'Incoming Invoices': [],\n    'Approved Invoices': [],\n    // This is still a conceptual internal bucket for moved items\n    'Published Documents': []\n  });\n\n  // State for file editing and viewing modals\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [isViewModalOpen, setIsViewModalOpen] = useState(false);\n  const [editedFileName, setEditedFileName] = useState('');\n  const [editedFileContent, setEditedFileContent] = useState('');\n\n  // State for global success/error messages\n  const [message, setMessage] = useState({\n    text: '',\n    type: ''\n  });\n  const messageTimeoutRef = useRef(null);\n\n  // Function to show a temporary message\n  const showMessage = (text, type = 'success') => {\n    setMessage({\n      text,\n      type\n    });\n    if (messageTimeoutRef.current) {\n      clearTimeout(messageTimeoutRef.current);\n    }\n    messageTimeoutRef.current = setTimeout(() => {\n      setMessage({\n        text: '',\n        type: ''\n      });\n    }, 3000);\n  };\n\n  // --- Microsoft Authentication Functions ---\n  const handleMicrosoftLogin = async () => {\n    try {\n      await instance.loginPopup(loginRequest);\n      setCurrentPage('dashboard');\n      showMessage('Logged in successfully!', 'success');\n    } catch (error) {\n      console.error(\"Microsoft login failed:\", error);\n      showMessage('Login failed. Please try again.', 'error');\n    }\n  };\n  const handleLogout = () => {\n    instance.logoutPopup();\n    setCurrentPage('login');\n    showMessage('Logged out successfully.', 'success');\n  };\n\n  /**\n   * Acquires an access token silently using MSAL.js.\n   * This token is then used to authenticate requests to Microsoft Graph API.\n   * @returns {Promise<string>} A promise that resolves with the access token.\n   */\n  const getAccessToken = useCallback(async () => {\n    if (accounts.length === 0) {\n      throw new Error(\"No active account found. Please login.\");\n    }\n    try {\n      const response = await instance.acquireTokenSilent({\n        ...loginRequest,\n        account: accounts[0]\n      });\n      return response.accessToken;\n    } catch (error) {\n      if (error instanceof InteractionRequiredAuthError) {\n        console.warn(\"Interaction required to acquire token. Attempting popup...\");\n        try {\n          const response = await instance.acquireTokenPopup(loginRequest);\n          return response.accessToken;\n        } catch (popupError) {\n          console.error(\"Error acquiring token via popup:\", popupError);\n          showMessage('Authentication required. Please log in again.', 'error');\n          handleLogout();\n          throw popupError;\n        }\n      }\n      console.error(\"Error acquiring token silently:\", error);\n      showMessage('Failed to acquire token. Please try again.', 'error');\n      throw error;\n    }\n  }, [accounts, instance, showMessage, handleLogout]);\n\n  // --- SharePoint API (Microsoft Graph) Integration ---\n  // You MUST fill in these IDs with values from your SharePoint environment.\n  // Use Microsoft Graph Explorer (https://developer.microsoft.com/en-us/graph/graph-explorer)\n  // to discover your site, drive (document library), and folder item IDs.\n  // Example queries:\n  // - To find site ID by URL: GET https://graph.microsoft.com/v1.0/sites?search=\"yoursharepoint.sharepoint.com\"\n  // - To find drives (document libraries) in a site: GET https://graph.microsoft.com/v1.0/sites/{site-id}/drives\n  // - To find folder item ID: GET https://graph.microsoft.com/v1.0/sites/{site-id}/drives/{drive-id}/root:/Your Folder Name:/\n  const SHAREPOINT_SITE_ID = \"YOUR_SHA841bd035-8173-4a50-93e7-5fed477408d0REPOINT_SITE_ID\"; // <--- FILL THIS OUT\n  const SHAREPOINT_DRIVE_ID = \"YOUR_SHAREPOINT_DRIVE_ID\"; // <--- FILL THIS OUT\n  const APPROVED_INVOICES_FOLDER_ITEM_ID = \"YOUR_APPROVED_INVOICES_FOLDER_ITEM_ID\"; // <--- FILL THIS OUT\n\n  /**\n   * Lists files in a SharePoint folder using Microsoft Graph API.\n   * @param {string} folderName The display name of the folder (e.g., 'Incoming Invoices', 'Published Documents').\n   * @returns {Promise<Array>} A promise that resolves with an array of file objects.\n   */\n  const listFilesInSharePointFolder = useCallback(async folderName => {\n    if (!isAuthenticated) return []; // Cannot list files if not authenticated\n    try {\n      const accessToken = await getAccessToken();\n      console.log(`Fetching files from SharePoint folder: \"${folderName}\"`);\n      const folderPath = encodeURIComponent(folderName); // Encode folder name for URL\n      const response = await fetch(`https://graph.microsoft.com/v1.0/sites/${SHAREPOINT_SITE_ID}/drives/${SHAREPOINT_DRIVE_ID}/root:/${folderPath}:/children`, {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error listing files! Status: ${response.status} - ${response.statusText}`);\n      }\n      const data = await response.json();\n      // Map Graph API response to our app's file object format\n      return data.value.map(item => ({\n        id: item.id,\n        name: item.name,\n        type: item.file ? item.file.mimeType.includes('pdf') ? 'pdf' : 'xlsx' : 'unknown' // Check item.file to determine type\n        // content will be fetched on demand (when editing/viewing)\n      }));\n    } catch (error) {\n      console.error(`Error listing files in SharePoint folder \"${folderName}\":`, error);\n      showMessage(`Failed to load files from ${folderName}.`, 'error');\n      return []; // Return empty array on error\n    }\n  }, [isAuthenticated, getAccessToken, showMessage]);\n\n  /**\n   * Reads the content of a file from SharePoint using Microsoft Graph API.\n   * @param {object} file The file object (must have 'id' and 'name').\n   * @returns {Promise<string>} A promise that resolves with the file content.\n   */\n  const readFileContent = useCallback(async file => {\n    // Removed currentFolder param as it's not needed for Graph API content endpoint\n    try {\n      const accessToken = await getAccessToken();\n      console.log(`Attempting to read content of \"${file.name}\" from SharePoint.`);\n      const response = await fetch(`https://graph.microsoft.com/v1.0/sites/${SHAREPOINT_SITE_ID}/drives/${SHAREPOINT_DRIVE_ID}/items/${file.id}/content`, {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error reading file content! Status: ${response.status} - ${response.statusText}`);\n      }\n      const content = await response.text();\n      return content;\n    } catch (error) {\n      console.error(\"Error reading file content from SharePoint:\", error);\n      showMessage('Failed to read file content.', 'error');\n      throw error;\n    }\n  }, [getAccessToken, showMessage]);\n\n  /**\n   * Updates a file's name and/or content in SharePoint using Microsoft Graph API.\n   * @param {string} fileId The ID of the file to update.\n   * @param {string} newName The new name for the file (optional).\n   * @param {string} newContent The new content for the file (optional).\n   * @returns {Promise<boolean>} A promise that resolves to true on success.\n   */\n  const updateFile = useCallback(async (fileId, newName, newContent) => {\n    // Removed currentFolder param\n    try {\n      const accessToken = await getAccessToken();\n      console.log(`Attempting to update file ID \"${fileId}\" in SharePoint.`);\n      const updatePayload = {};\n      let contentUpdateSuccess = true;\n\n      // Handle content update first (PUT request to /content endpoint)\n      if (newContent !== undefined) {\n        const contentResponse = await fetch(`https://graph.microsoft.com/v1.0/sites/${SHAREPOINT_SITE_ID}/drives/${SHAREPOINT_DRIVE_ID}/items/${fileId}/content`, {\n          method: 'PUT',\n          headers: {\n            'Authorization': `Bearer ${accessToken}`,\n            // For actual XLSX: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n            'Content-Type': 'text/plain' // Keeping text/plain for simplicity with simulated content\n          },\n          body: newContent\n        });\n        if (!contentResponse.ok) {\n          contentUpdateSuccess = false;\n          throw new Error(`Content update failed: ${contentResponse.status} - ${contentResponse.statusText}`);\n        }\n      }\n\n      // Handle name update (PATCH request to item endpoint)\n      if (newName !== undefined) {\n        updatePayload.name = newName;\n      }\n      if (Object.keys(updatePayload).length > 0) {\n        const renameResponse = await fetch(`https://graph.microsoft.com/v1.0/sites/${SHAREPOINT_SITE_ID}/drives/${SHAREPOINT_DRIVE_ID}/items/${fileId}`, {\n          method: 'PATCH',\n          headers: {\n            'Authorization': `Bearer ${accessToken}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(updatePayload)\n        });\n        if (!renameResponse.ok) {\n          throw new Error(`Rename failed: ${renameResponse.status} - ${renameResponse.statusText}`);\n        }\n      }\n\n      // If both content and name updates are successful, re-fetch files to update UI\n      if (contentUpdateSuccess) {\n        // After modifying a file, it's good practice to re-fetch the entire folder to ensure UI is in sync.\n        // This avoids complex local state mutations for shared folders.\n        fetchFolders();\n        return true;\n      }\n      return false; // Indicate failure if content update failed\n    } catch (error) {\n      console.error(\"Error updating file in SharePoint:\", error);\n      showMessage('Failed to update file.', 'error');\n      throw error;\n    }\n  }, [getAccessToken, showMessage, APPROVED_INVOICES_FOLDER_ITEM_ID, SHAREPOINT_DRIVE_ID, SHAREPOINT_SITE_ID]);\n\n  /**\n   * Moves a file from one folder to another in SharePoint using Microsoft Graph API.\n   * @param {string} fileId The ID of the file to move.\n   * @returns {Promise<boolean>} A promise that resolves to true on success.\n   */\n  const moveFile = useCallback(async fileId => {\n    // Removed source/destinationFolder params for Graph API logic\n    try {\n      const accessToken = await getAccessToken();\n      console.log(`Attempting to move file ID \"${fileId}\" to Approved Invoices folder.`);\n      const response = await fetch(`https://graph.microsoft.com/v1.0/sites/${SHAREPOINT_SITE_ID}/drives/${SHAREPOINT_DRIVE_ID}/items/${fileId}`, {\n        method: 'PATCH',\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          parentReference: {\n            id: APPROVED_INVOICES_FOLDER_ITEM_ID // Use the ITEM ID of the destination folder\n          }\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Move failed: ${response.status} - ${response.statusText}`);\n      }\n\n      // After successful move, re-fetch files for both folders to update UI\n      fetchFolders(); // Re-fetch all relevant folder contents\n      return true;\n    } catch (error) {\n      console.error(\"Error moving file in SharePoint:\", error);\n      showMessage('Failed to move file.', 'error');\n      throw error;\n    }\n  }, [getAccessToken, showMessage, APPROVED_INVOICES_FOLDER_ITEM_ID, SHAREPOINT_DRIVE_ID, SHAREPOINT_SITE_ID, folders]); // Added folders to dependency array for fetchFolders\n\n  // Unified function to fetch files for all relevant folders\n  const fetchFolders = useCallback(async () => {\n    if (!isAuthenticated) {\n      setFolders({\n        'Incoming Invoices': [],\n        'Published Documents': [],\n        'Approved Invoices': []\n      });\n      return;\n    }\n    try {\n      const incoming = await listFilesInSharePointFolder('Incoming Invoices');\n      const published = await listFilesInSharePointFolder('Published Documents');\n      // Note: 'Approved Invoices' is not listed directly as it's hidden from UI,\n      // but its content updates when files are moved there.\n      setFolders(prev => ({\n        ...prev,\n        'Incoming Invoices': incoming,\n        'Published Documents': published\n      }));\n    } catch (error) {\n      console.error(\"Error fetching all folders:\", error);\n    }\n  }, [isAuthenticated, listFilesInSharePointFolder]);\n\n  // Effect to fetch folder data when authenticated or when relevant pages are loaded\n  useEffect(() => {\n    if (isAuthenticated) {\n      fetchFolders(); // Fetch when authenticated\n    } else {\n      // Clear data if not authenticated\n      setFolders({\n        'Incoming Invoices': [],\n        'Published Documents': [],\n        'Approved Invoices': []\n      });\n    }\n  }, [isAuthenticated, fetchFolders]);\n\n  // --- UI Event Handlers ---\n  // These now call the integrated SharePoint functions\n  const handleEditClick = async file => {\n    // Removed currentFolder, not needed for readFileContent directly\n    setSelectedFile(file);\n    setEditedFileName(file.name);\n    try {\n      const content = await readFileContent(file);\n      setEditedFileContent(content);\n      setIsEditModalOpen(true);\n    } catch (error) {\n      console.error(\"Failed to load file content for editing:\", error);\n      showMessage('Could not load file content for editing.', 'error');\n    }\n  };\n  const handleSaveEdit = async () => {\n    if (selectedFile) {\n      try {\n        // currentFolder is no longer passed as updateFile determines target via fileId\n        await updateFile(selectedFile.id, editedFileName, editedFileContent);\n        showMessage('File saved successfully!', 'success');\n        setIsEditModalOpen(false);\n        setSelectedFile(null);\n      } catch (error) {\n        console.error(\"Error saving file:\", error);\n        showMessage('Failed to save file.', 'error');\n      }\n    }\n  };\n  const handleApprove = async fileId => {\n    try {\n      // source/destinationFolder params are now handled internally by moveFile to target APPROVED_INVOICES_FOLDER_ITEM_ID\n      await moveFile(fileId);\n      showMessage('Invoice approved and moved!', 'success');\n    } catch (error) {\n      console.error(\"Error approving invoice:\", error);\n      showMessage('Failed to approve invoice.', 'error');\n    }\n  };\n  const handleView = async file => {\n    // Removed currentFolder, not needed for readFileContent directly\n    setSelectedFile(file);\n    try {\n      const content = await readFileContent(file);\n      setEditedFileContent(content);\n      setIsViewModalOpen(true);\n    } catch (error) {\n      console.error(\"Failed to load file content for viewing:\", error);\n      showMessage('Could not load file content for viewing.', 'error');\n    }\n  };\n\n  // --- Main App Rendering ---\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"relative min-h-screen flex flex-col\",\n    children: [message.text && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `fixed top-4 right-4 p-3 rounded-lg shadow-lg z-50 ${message.type === 'success' ? 'bg-green-500 text-white' : 'bg-red-500 text-white'}`,\n      children: message.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"flex-grow\",\n      children: !isAuthenticated ? /*#__PURE__*/_jsxDEV(LoginPage, {\n        onLogin: handleMicrosoftLogin\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [currentPage === 'dashboard' && /*#__PURE__*/_jsxDEV(DashboardPage, {\n          userProfile: userProfile,\n          folders: folders,\n          setCurrentPage: setCurrentPage,\n          onLogout: handleLogout\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 15\n        }, this), currentPage === 'incomingInvoices' && /*#__PURE__*/_jsxDEV(IncomingInvoicesPage, {\n          files: folders['Incoming Invoices'] // Now relies on data fetched from SharePoint\n          ,\n          setCurrentPage: setCurrentPage,\n          onEdit: handleEditClick,\n          onApprove: handleApprove,\n          onView: handleView\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 15\n        }, this), currentPage === 'publishedDocuments' && /*#__PURE__*/_jsxDEV(PublishedDocumentsPage, {\n          files: folders['Published Documents'] // Now relies on data fetched from SharePoint\n          ,\n          setCurrentPage: setCurrentPage,\n          onView: handleView\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EditFileModal, {\n      isOpen: isEditModalOpen,\n      onClose: () => setIsEditModalOpen(false),\n      fileName: editedFileName,\n      onFileNameChange: e => setEditedFileName(e.target.value),\n      fileContent: editedFileContent,\n      onFileContentChange: e => setEditedFileContent(e.target.value),\n      onSave: handleSaveEdit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ViewFileModal, {\n      isOpen: isViewModalOpen,\n      onClose: () => setIsViewModalOpen(false),\n      fileName: (selectedFile === null || selectedFile === void 0 ? void 0 : selectedFile.name) || '',\n      fileContent: editedFileContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"text-center text-gray-500 mt-auto py-4 text-sm bg-gray-50 w-full border-t border-gray-200\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\xA9 2024 Invoice System. All rights reserved. \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-xs mt-2\",\n        children: \"This application is now attempting direct SharePoint integration via Microsoft Graph API.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 401,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Hsh7KZuhRqhl5E9hkaq+sYUDT2A=\", false, function () {\n  return [useMsal, useIsAuthenticated];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useCallback","useMsal","useIsAuthenticated","InteractionRequiredAuthError","loginRequest","LoginPage","DashboardPage","IncomingInvoicesPage","PublishedDocumentsPage","EditFileModal","ViewFileModal","X","FileText","FileSpreadsheet","Eye","Pencil","CheckCircle","FolderOpen","LogIn","LayoutDashboard","ListTodo","FileBarChart","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","instance","accounts","isAuthenticated","currentPage","setCurrentPage","userProfile","length","folders","setFolders","selectedFile","setSelectedFile","isEditModalOpen","setIsEditModalOpen","isViewModalOpen","setIsViewModalOpen","editedFileName","setEditedFileName","editedFileContent","setEditedFileContent","message","setMessage","text","type","messageTimeoutRef","showMessage","current","clearTimeout","setTimeout","handleMicrosoftLogin","loginPopup","error","console","handleLogout","logoutPopup","getAccessToken","Error","response","acquireTokenSilent","account","accessToken","warn","acquireTokenPopup","popupError","SHAREPOINT_SITE_ID","SHAREPOINT_DRIVE_ID","APPROVED_INVOICES_FOLDER_ITEM_ID","listFilesInSharePointFolder","folderName","log","folderPath","encodeURIComponent","fetch","headers","ok","status","statusText","data","json","value","map","item","id","name","file","mimeType","includes","readFileContent","content","updateFile","fileId","newName","newContent","updatePayload","contentUpdateSuccess","undefined","contentResponse","method","body","Object","keys","renameResponse","JSON","stringify","fetchFolders","moveFile","parentReference","incoming","published","prev","handleEditClick","handleSaveEdit","handleApprove","handleView","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onLogin","onLogout","files","onEdit","onApprove","onView","isOpen","onClose","onFileNameChange","e","target","fileContent","onFileContentChange","onSave","_c","$RefreshReg$"],"sources":["/workspaces/InvoiceApp/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react'; // Added useEffect and useCallback\n// Import MSAL hooks\nimport { useMsal, useIsAuthenticated } from '@azure/msal-react';\nimport { InteractionRequiredAuthError } from '@azure/msal-browser';\n\n// Import your MSAL configuration for login requests\nimport { loginRequest } from './authConfig';\n\n// Import Page Components\nimport LoginPage from './pages/LoginPage';\nimport DashboardPage from './pages/DashboardPage';\nimport IncomingInvoicesPage from './pages/IncomingInvoicesPage';\nimport PublishedDocumentsPage from './pages/PublishedDocumentsPage';\n\n// Import Reusable Component Modals\nimport EditFileModal from './components/EditFileModal';\nimport ViewFileModal from './components/ViewFileModal';\n\n// Import icons\nimport {\n  X, FileText, FileSpreadsheet, Eye, Pencil, CheckCircle, FolderOpen, LogIn, LayoutDashboard, ListTodo, FileBarChart\n} from 'lucide-react';\n\n\nfunction App() {\n  // MSAL hooks for authentication state and instance management\n  const { instance, accounts } = useMsal();\n  const isAuthenticated = useIsAuthenticated();\n\n  // --- Global State Management ---\n  const [currentPage, setCurrentPage] = useState(isAuthenticated ? 'dashboard' : 'login');\n  const userProfile = isAuthenticated && accounts.length > 0 ? accounts[0] : null;\n\n  // Initial state for folders is empty; content will be fetched from SharePoint\n  const [folders, setFolders] = useState({\n    'Incoming Invoices': [],\n    'Approved Invoices': [], // This is still a conceptual internal bucket for moved items\n    'Published Documents': [],\n  });\n\n  // State for file editing and viewing modals\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [isViewModalOpen, setIsViewModalOpen] = useState(false);\n  const [editedFileName, setEditedFileName] = useState('');\n  const [editedFileContent, setEditedFileContent] = useState('');\n  \n  // State for global success/error messages\n  const [message, setMessage] = useState({ text: '', type: '' });\n  const messageTimeoutRef = useRef(null);\n\n  // Function to show a temporary message\n  const showMessage = (text, type = 'success') => {\n    setMessage({ text, type });\n    if (messageTimeoutRef.current) {\n      clearTimeout(messageTimeoutRef.current);\n    }\n    messageTimeoutRef.current = setTimeout(() => {\n      setMessage({ text: '', type: '' });\n    }, 3000);\n  };\n\n  // --- Microsoft Authentication Functions ---\n  const handleMicrosoftLogin = async () => {\n    try {\n      await instance.loginPopup(loginRequest);\n      setCurrentPage('dashboard');\n      showMessage('Logged in successfully!', 'success');\n    } catch (error) {\n      console.error(\"Microsoft login failed:\", error);\n      showMessage('Login failed. Please try again.', 'error');\n    }\n  };\n\n  const handleLogout = () => {\n    instance.logoutPopup();\n    setCurrentPage('login');\n    showMessage('Logged out successfully.', 'success');\n  };\n\n  /**\n   * Acquires an access token silently using MSAL.js.\n   * This token is then used to authenticate requests to Microsoft Graph API.\n   * @returns {Promise<string>} A promise that resolves with the access token.\n   */\n  const getAccessToken = useCallback(async () => {\n    if (accounts.length === 0) {\n      throw new Error(\"No active account found. Please login.\");\n    }\n    try {\n      const response = await instance.acquireTokenSilent({\n        ...loginRequest,\n        account: accounts[0]\n      });\n      return response.accessToken;\n    } catch (error) {\n      if (error instanceof InteractionRequiredAuthError) {\n        console.warn(\"Interaction required to acquire token. Attempting popup...\");\n        try {\n          const response = await instance.acquireTokenPopup(loginRequest);\n          return response.accessToken;\n        } catch (popupError) {\n          console.error(\"Error acquiring token via popup:\", popupError);\n          showMessage('Authentication required. Please log in again.', 'error');\n          handleLogout();\n          throw popupError;\n        }\n      }\n      console.error(\"Error acquiring token silently:\", error);\n      showMessage('Failed to acquire token. Please try again.', 'error');\n      throw error;\n    }\n  }, [accounts, instance, showMessage, handleLogout]);\n\n\n  // --- SharePoint API (Microsoft Graph) Integration ---\n  // You MUST fill in these IDs with values from your SharePoint environment.\n  // Use Microsoft Graph Explorer (https://developer.microsoft.com/en-us/graph/graph-explorer)\n  // to discover your site, drive (document library), and folder item IDs.\n  // Example queries:\n  // - To find site ID by URL: GET https://graph.microsoft.com/v1.0/sites?search=\"yoursharepoint.sharepoint.com\"\n  // - To find drives (document libraries) in a site: GET https://graph.microsoft.com/v1.0/sites/{site-id}/drives\n  // - To find folder item ID: GET https://graph.microsoft.com/v1.0/sites/{site-id}/drives/{drive-id}/root:/Your Folder Name:/\n  const SHAREPOINT_SITE_ID = \"YOUR_SHA841bd035-8173-4a50-93e7-5fed477408d0REPOINT_SITE_ID\"; // <--- FILL THIS OUT\n  const SHAREPOINT_DRIVE_ID = \"YOUR_SHAREPOINT_DRIVE_ID\"; // <--- FILL THIS OUT\n  const APPROVED_INVOICES_FOLDER_ITEM_ID = \"YOUR_APPROVED_INVOICES_FOLDER_ITEM_ID\"; // <--- FILL THIS OUT\n\n  /**\n   * Lists files in a SharePoint folder using Microsoft Graph API.\n   * @param {string} folderName The display name of the folder (e.g., 'Incoming Invoices', 'Published Documents').\n   * @returns {Promise<Array>} A promise that resolves with an array of file objects.\n   */\n  const listFilesInSharePointFolder = useCallback(async (folderName) => {\n    if (!isAuthenticated) return []; // Cannot list files if not authenticated\n    try {\n      const accessToken = await getAccessToken();\n      console.log(`Fetching files from SharePoint folder: \"${folderName}\"`);\n\n      const folderPath = encodeURIComponent(folderName); // Encode folder name for URL\n      const response = await fetch(\n        `https://graph.microsoft.com/v1.0/sites/${SHAREPOINT_SITE_ID}/drives/${SHAREPOINT_DRIVE_ID}/root:/${folderPath}:/children`,\n        {\n          headers: { 'Authorization': `Bearer ${accessToken}` }\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(`HTTP error listing files! Status: ${response.status} - ${response.statusText}`);\n      }\n      const data = await response.json();\n      // Map Graph API response to our app's file object format\n      return data.value.map(item => ({\n        id: item.id,\n        name: item.name,\n        type: item.file ? (item.file.mimeType.includes('pdf') ? 'pdf' : 'xlsx') : 'unknown', // Check item.file to determine type\n        // content will be fetched on demand (when editing/viewing)\n      }));\n\n    } catch (error) {\n      console.error(`Error listing files in SharePoint folder \"${folderName}\":`, error);\n      showMessage(`Failed to load files from ${folderName}.`, 'error');\n      return []; // Return empty array on error\n    }\n  }, [isAuthenticated, getAccessToken, showMessage]);\n\n\n  /**\n   * Reads the content of a file from SharePoint using Microsoft Graph API.\n   * @param {object} file The file object (must have 'id' and 'name').\n   * @returns {Promise<string>} A promise that resolves with the file content.\n   */\n  const readFileContent = useCallback(async (file) => { // Removed currentFolder param as it's not needed for Graph API content endpoint\n    try {\n      const accessToken = await getAccessToken();\n      console.log(`Attempting to read content of \"${file.name}\" from SharePoint.`);\n\n      const response = await fetch(\n        `https://graph.microsoft.com/v1.0/sites/${SHAREPOINT_SITE_ID}/drives/${SHAREPOINT_DRIVE_ID}/items/${file.id}/content`,\n        {\n          headers: { 'Authorization': `Bearer ${accessToken}` }\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(`HTTP error reading file content! Status: ${response.status} - ${response.statusText}`);\n      }\n      \n      const content = await response.text(); \n      return content;\n\n    } catch (error) {\n      console.error(\"Error reading file content from SharePoint:\", error);\n      showMessage('Failed to read file content.', 'error');\n      throw error;\n    }\n  }, [getAccessToken, showMessage]);\n\n\n  /**\n   * Updates a file's name and/or content in SharePoint using Microsoft Graph API.\n   * @param {string} fileId The ID of the file to update.\n   * @param {string} newName The new name for the file (optional).\n   * @param {string} newContent The new content for the file (optional).\n   * @returns {Promise<boolean>} A promise that resolves to true on success.\n   */\n  const updateFile = useCallback(async (fileId, newName, newContent) => { // Removed currentFolder param\n    try {\n      const accessToken = await getAccessToken();\n      console.log(`Attempting to update file ID \"${fileId}\" in SharePoint.`);\n\n      const updatePayload = {};\n      let contentUpdateSuccess = true;\n\n      // Handle content update first (PUT request to /content endpoint)\n      if (newContent !== undefined) {\n         const contentResponse = await fetch(\n           `https://graph.microsoft.com/v1.0/sites/${SHAREPOINT_SITE_ID}/drives/${SHAREPOINT_DRIVE_ID}/items/${fileId}/content`,\n           {\n             method: 'PUT',\n             headers: {\n               'Authorization': `Bearer ${accessToken}`,\n               // For actual XLSX: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n               'Content-Type': 'text/plain' // Keeping text/plain for simplicity with simulated content\n             },\n             body: newContent\n           }\n         );\n         if (!contentResponse.ok) {\n           contentUpdateSuccess = false;\n           throw new Error(`Content update failed: ${contentResponse.status} - ${contentResponse.statusText}`);\n         }\n      }\n\n      // Handle name update (PATCH request to item endpoint)\n      if (newName !== undefined) {\n        updatePayload.name = newName;\n      }\n\n      if (Object.keys(updatePayload).length > 0) {\n        const renameResponse = await fetch(\n          `https://graph.microsoft.com/v1.0/sites/${SHAREPOINT_SITE_ID}/drives/${SHAREPOINT_DRIVE_ID}/items/${fileId}`,\n          {\n            method: 'PATCH',\n            headers: {\n              'Authorization': `Bearer ${accessToken}`,\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(updatePayload)\n          }\n        );\n        if (!renameResponse.ok) {\n          throw new Error(`Rename failed: ${renameResponse.status} - ${renameResponse.statusText}`);\n        }\n      }\n\n      // If both content and name updates are successful, re-fetch files to update UI\n      if (contentUpdateSuccess) {\n         // After modifying a file, it's good practice to re-fetch the entire folder to ensure UI is in sync.\n         // This avoids complex local state mutations for shared folders.\n         fetchFolders();\n         return true;\n      }\n      return false; // Indicate failure if content update failed\n\n    } catch (error) {\n      console.error(\"Error updating file in SharePoint:\", error);\n      showMessage('Failed to update file.', 'error');\n      throw error;\n    }\n  }, [getAccessToken, showMessage, APPROVED_INVOICES_FOLDER_ITEM_ID, SHAREPOINT_DRIVE_ID, SHAREPOINT_SITE_ID]);\n\n\n  /**\n   * Moves a file from one folder to another in SharePoint using Microsoft Graph API.\n   * @param {string} fileId The ID of the file to move.\n   * @returns {Promise<boolean>} A promise that resolves to true on success.\n   */\n  const moveFile = useCallback(async (fileId) => { // Removed source/destinationFolder params for Graph API logic\n    try {\n      const accessToken = await getAccessToken();\n      console.log(`Attempting to move file ID \"${fileId}\" to Approved Invoices folder.`);\n\n      const response = await fetch(\n        `https://graph.microsoft.com/v1.0/sites/${SHAREPOINT_SITE_ID}/drives/${SHAREPOINT_DRIVE_ID}/items/${fileId}`,\n        {\n          method: 'PATCH',\n          headers: {\n            'Authorization': `Bearer ${accessToken}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            parentReference: {\n              id: APPROVED_INVOICES_FOLDER_ITEM_ID // Use the ITEM ID of the destination folder\n            }\n          })\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(`Move failed: ${response.status} - ${response.statusText}`);\n      }\n\n      // After successful move, re-fetch files for both folders to update UI\n      fetchFolders(); // Re-fetch all relevant folder contents\n      return true;\n\n    } catch (error) {\n      console.error(\"Error moving file in SharePoint:\", error);\n      showMessage('Failed to move file.', 'error');\n      throw error;\n    }\n  }, [getAccessToken, showMessage, APPROVED_INVOICES_FOLDER_ITEM_ID, SHAREPOINT_DRIVE_ID, SHAREPOINT_SITE_ID, folders]); // Added folders to dependency array for fetchFolders\n\n\n  // Unified function to fetch files for all relevant folders\n  const fetchFolders = useCallback(async () => {\n    if (!isAuthenticated) {\n      setFolders({ 'Incoming Invoices': [], 'Published Documents': [], 'Approved Invoices': [] });\n      return;\n    }\n    try {\n      const incoming = await listFilesInSharePointFolder('Incoming Invoices');\n      const published = await listFilesInSharePointFolder('Published Documents');\n      // Note: 'Approved Invoices' is not listed directly as it's hidden from UI,\n      // but its content updates when files are moved there.\n      setFolders(prev => ({\n        ...prev,\n        'Incoming Invoices': incoming,\n        'Published Documents': published,\n      }));\n    } catch (error) {\n      console.error(\"Error fetching all folders:\", error);\n    }\n  }, [isAuthenticated, listFilesInSharePointFolder]);\n\n  // Effect to fetch folder data when authenticated or when relevant pages are loaded\n  useEffect(() => {\n    if (isAuthenticated) {\n      fetchFolders(); // Fetch when authenticated\n    } else {\n      // Clear data if not authenticated\n      setFolders({ 'Incoming Invoices': [], 'Published Documents': [], 'Approved Invoices': [] });\n    }\n  }, [isAuthenticated, fetchFolders]);\n\n  // --- UI Event Handlers ---\n  // These now call the integrated SharePoint functions\n  const handleEditClick = async (file) => { // Removed currentFolder, not needed for readFileContent directly\n    setSelectedFile(file);\n    setEditedFileName(file.name);\n    try {\n      const content = await readFileContent(file);\n      setEditedFileContent(content);\n      setIsEditModalOpen(true);\n    } catch (error) {\n      console.error(\"Failed to load file content for editing:\", error);\n      showMessage('Could not load file content for editing.', 'error');\n    }\n  };\n\n  const handleSaveEdit = async () => {\n    if (selectedFile) {\n      try {\n        // currentFolder is no longer passed as updateFile determines target via fileId\n        await updateFile(selectedFile.id, editedFileName, editedFileContent);\n        showMessage('File saved successfully!', 'success');\n        setIsEditModalOpen(false);\n        setSelectedFile(null);\n      } catch (error) {\n        console.error(\"Error saving file:\", error);\n        showMessage('Failed to save file.', 'error');\n      }\n    }\n  };\n\n  const handleApprove = async (fileId) => {\n    try {\n      // source/destinationFolder params are now handled internally by moveFile to target APPROVED_INVOICES_FOLDER_ITEM_ID\n      await moveFile(fileId); \n      showMessage('Invoice approved and moved!', 'success');\n    } catch (error) {\n      console.error(\"Error approving invoice:\", error);\n      showMessage('Failed to approve invoice.', 'error');\n    }\n  };\n\n  const handleView = async (file) => { // Removed currentFolder, not needed for readFileContent directly\n    setSelectedFile(file);\n    try {\n      const content = await readFileContent(file);\n      setEditedFileContent(content);\n      setIsViewModalOpen(true);\n    } catch (error) {\n      console.error(\"Failed to load file content for viewing:\", error);\n      showMessage('Could not load file content for viewing.', 'error');\n    }\n  };\n\n  // --- Main App Rendering ---\n  return (\n    <div className=\"relative min-h-screen flex flex-col\">\n      {/* Global Message component */}\n      {message.text && (\n        <div className={`fixed top-4 right-4 p-3 rounded-lg shadow-lg z-50 ${message.type === 'success' ? 'bg-green-500 text-white' : 'bg-red-500 text-white'}`}>\n          {message.text}\n        </div>\n      )}\n\n      {/* Conditional rendering of pages based on authentication and currentPage state */}\n      <main className=\"flex-grow\">\n        {!isAuthenticated ? (\n          <LoginPage onLogin={handleMicrosoftLogin} />\n        ) : (\n          <>\n            {currentPage === 'dashboard' && (\n              <DashboardPage\n                userProfile={userProfile}\n                folders={folders}\n                setCurrentPage={setCurrentPage}\n                onLogout={handleLogout}\n              />\n            )}\n            {currentPage === 'incomingInvoices' && (\n              <IncomingInvoicesPage\n                files={folders['Incoming Invoices']} // Now relies on data fetched from SharePoint\n                setCurrentPage={setCurrentPage}\n                onEdit={handleEditClick}\n                onApprove={handleApprove}\n                onView={handleView}\n              />\n            )}\n            {currentPage === 'publishedDocuments' && (\n              <PublishedDocumentsPage\n                files={folders['Published Documents']} // Now relies on data fetched from SharePoint\n                setCurrentPage={setCurrentPage}\n                onView={handleView}\n              />\n            )}\n          </>\n        )}\n      </main>\n\n      {/* Modals */}\n      <EditFileModal\n        isOpen={isEditModalOpen}\n        onClose={() => setIsEditModalOpen(false)}\n        fileName={editedFileName}\n        onFileNameChange={(e) => setEditedFileName(e.target.value)}\n        fileContent={editedFileContent}\n        onFileContentChange={(e) => setEditedFileContent(e.target.value)}\n        onSave={handleSaveEdit}\n      />\n      <ViewFileModal\n        isOpen={isViewModalOpen}\n        onClose={() => setIsViewModalOpen(false)}\n        fileName={selectedFile?.name || ''}\n        fileContent={editedFileContent}\n      />\n\n      {/* Global Footer */}\n      <footer className=\"text-center text-gray-500 mt-auto py-4 text-sm bg-gray-50 w-full border-t border-gray-200\">\n        <p>&copy; 2024 Invoice System. All rights reserved. </p>\n        <p className=\"text-xs mt-2\">\n          This application is now attempting direct SharePoint integration via Microsoft Graph API.\n        </p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}