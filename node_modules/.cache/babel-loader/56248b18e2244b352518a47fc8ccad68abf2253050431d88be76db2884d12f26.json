{"ast":null,"code":"var _jsxFileName = \"/workspaces/InvoiceApp/src/App.js\",\n  _s = $RefreshSig$();\n// src/App.js\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useMsal, useIsAuthenticated } from '@azure/msal-react';\nimport { loginRequest } from './authConfig';\n\n// Hooks\nimport useGraph from './hooks/useGraph';\n\n// Pages\nimport LoginPage from './pages/LoginPage';\nimport DashboardPage from './pages/DashboardPage';\nimport FileListPage from './pages/FileListPage';\n\n// Components\nimport LoadingSpinner from './components/LoadingSpinner';\nimport MessageDisplay from './components/MessageDisplay';\nimport Header from './components/Header';\nimport ConfirmModal from './components/ConfirmModal';\nimport ViewFileModal from './components/ViewFileModal';\nimport ExcelChoiceModal from './components/ExcelChoiceModal';\nimport SettingsModal from './components/SettingsModal';\nimport { FOLDER_NAMES, FOLDER_DETAILS } from './utils/constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const {\n    instance,\n    accounts\n  } = useMsal();\n  const isAuthenticated = useIsAuthenticated();\n  const {\n    folders,\n    isLoading,\n    error,\n    fetchSharePointData,\n    moveSharePointFile,\n    downloadFileFromSharePoint\n  } = useGraph(instance, accounts);\n  const [userProfile, setUserProfile] = useState(null);\n  const [message, setMessage] = useState({\n    text: '',\n    type: ''\n  });\n  const [isDarkMode, setIsDarkMode] = useState(() => localStorage.getItem('theme') === 'dark');\n  const [currentPage, setCurrentPage] = useState('login');\n  const [modal, setModal] = useState(null); // Manages all modals\n\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [viewedFileContent, setViewedFileContent] = useState(null);\n  const [excelOpeningPreference, setExcelOpeningPreference] = useState(() => localStorage.getItem('excelOpeningPreference') || 'ask');\n\n  // --- Effects ---\n  useEffect(() => {\n    if (isAuthenticated) {\n      const fetchProfile = async () => {\n        try {\n          const response = await instance.acquireTokenSilent({\n            ...loginRequest,\n            account: accounts[0]\n          });\n          const graphResponse = await fetch('https://graph.microsoft.com/v1.0/me', {\n            headers: {\n              Authorization: `Bearer ${response.accessToken}`\n            }\n          });\n          const profile = await graphResponse.json();\n          setUserProfile(profile);\n          setCurrentPage('dashboard');\n        } catch (e) {\n          console.error(e);\n          showMessage('Could not fetch user profile.', 'error');\n        }\n      };\n      fetchProfile();\n    } else {\n      setCurrentPage('login');\n    }\n  }, [isAuthenticated, accounts, instance]);\n  useEffect(() => {\n    if (error) {\n      showMessage(error, 'error');\n    }\n  }, [error]);\n  useEffect(() => {\n    localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');\n    document.documentElement.classList.toggle('dark', isDarkMode);\n  }, [isDarkMode]);\n  useEffect(() => {\n    localStorage.setItem('excelOpeningPreference', excelOpeningPreference);\n  }, [excelOpeningPreference]);\n\n  // --- Handlers ---\n  const showMessage = (text, type = 'info') => {\n    setMessage({\n      text,\n      type\n    });\n  };\n  const handleMicrosoftLogin = () => instance.loginPopup(loginRequest).catch(e => console.error(e));\n  const handleLogout = () => instance.logoutPopup();\n  const handleFileAction = useCallback(async (action, file) => {\n    setSelectedFile(file);\n    switch (action) {\n      case 'view':\n        if (file.type === 'xlsx') {\n          handleExcelOpen(file);\n        } else {\n          try {\n            const content = await downloadFileFromSharePoint(file);\n            setViewedFileContent(content);\n            setModal('viewFile');\n          } catch (e) {\n            showMessage(e.message, 'error');\n          }\n        }\n        break;\n      case 'approve':\n        setModal('confirmApproval');\n        break;\n      case 'sent':\n        setModal('confirmSent');\n        break;\n      default:\n        break;\n    }\n  }, [downloadFileFromSharePoint]);\n  const handleExcelOpen = file => {\n    if (excelOpeningPreference === 'ask') {\n      setModal('excelChoice');\n    } else if (excelOpeningPreference === 'web') {\n      window.open(file.webUrl, '_blank');\n    } else {\n      window.location.href = `ms-excel:ofe|u|${encodeURIComponent(file.webUrl)}`;\n    }\n  };\n  const handleConfirm = async () => {\n    if (!selectedFile || !modal) return;\n    const action = modal;\n    setModal(null);\n    try {\n      let successMessage = '';\n      if (action === 'confirmApproval') {\n        await moveSharePointFile(selectedFile.id, FOLDER_DETAILS.INCOMING_INVOICES.id, FOLDER_DETAILS.APPROVED_INVOICES.id);\n        successMessage = 'File approved successfully.';\n      } else if (action === 'confirmSent') {\n        await moveSharePointFile(selectedFile.id, FOLDER_DETAILS.PUBLISHED_DOCUMENTS.id, FOLDER_DETAILS.SENT_DOCUMENTS.id);\n        successMessage = 'File marked as sent.';\n      }\n      showMessage(successMessage, 'success');\n      fetchSharePointData(); // Refresh data after move\n    } catch (e) {\n      showMessage(e.message, 'error');\n    }\n  };\n  const renderPage = () => {\n    const pageDetails = FOLDER_DETAILS[currentPage];\n    if (pageDetails) {\n      return /*#__PURE__*/_jsxDEV(FileListPage, {\n        title: pageDetails.title,\n        files: folders[currentPage] || [],\n        onFileAction: handleFileAction,\n        pageType: currentPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this);\n    }\n    switch (currentPage) {\n      case 'dashboard':\n        return /*#__PURE__*/_jsxDEV(DashboardPage, {\n          userProfile: userProfile,\n          folders: folders,\n          setCurrentPage: setCurrentPage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this);\n      case 'login':\n        return /*#__PURE__*/_jsxDEV(LoginPage, {\n          onLogin: handleMicrosoftLogin\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 16\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(DashboardPage, {\n          userProfile: userProfile,\n          folders: folders,\n          setCurrentPage: setCurrentPage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  const closeModal = () => {\n    setModal(null);\n    setSelectedFile(null);\n    if (viewedFileContent && viewedFileContent.startsWith('blob:')) {\n      URL.revokeObjectURL(viewedFileContent);\n    }\n    setViewedFileContent(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-light-bg-canvas dark:bg-dark-bg-card text-text-primary-light dark:text-text-primary-dark\",\n    children: [isLoading && /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(MessageDisplay, {\n      message: message,\n      onClearMessage: () => setMessage({\n        text: '',\n        type: ''\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), isAuthenticated && /*#__PURE__*/_jsxDEV(Header, {\n      onLogout: handleLogout,\n      onRefresh: fetchSharePointData,\n      onSettingsClick: () => setModal('settings'),\n      setCurrentPage: setCurrentPage,\n      currentPage: currentPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"p-4 sm:p-6 md:p-8\",\n      children: renderPage()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConfirmModal, {\n      isOpen: modal === 'confirmApproval' || modal === 'confirmSent',\n      onClose: closeModal,\n      onConfirm: handleConfirm,\n      title: modal === 'confirmApproval' ? \"Confirm Approval\" : \"Confirm Sent\",\n      message: `Are you sure you want to proceed with this action for \"${selectedFile === null || selectedFile === void 0 ? void 0 : selectedFile.name}\"?`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ViewFileModal, {\n      isOpen: modal === 'viewFile',\n      onClose: closeModal,\n      file: selectedFile,\n      content: viewedFileContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ExcelChoiceModal, {\n      isOpen: modal === 'excelChoice',\n      onClose: closeModal,\n      fileName: (selectedFile === null || selectedFile === void 0 ? void 0 : selectedFile.name) || '',\n      onOpenWeb: () => {\n        window.open(selectedFile === null || selectedFile === void 0 ? void 0 : selectedFile.webUrl, '_blank');\n        closeModal();\n      },\n      onOpenDesktop: () => {\n        window.location.href = `ms-excel:ofe|u|${encodeURIComponent(selectedFile === null || selectedFile === void 0 ? void 0 : selectedFile.webUrl)}`;\n        closeModal();\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SettingsModal, {\n      isOpen: modal === 'settings',\n      onClose: closeModal,\n      isDarkMode: isDarkMode,\n      toggleDarkMode: () => setIsDarkMode(prev => !prev),\n      currentExcelPreference: excelOpeningPreference,\n      onPreferenceChange: setExcelOpeningPreference\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"UWKH8IwATQSOCyshFtdYbx4C1XA=\", false, function () {\n  return [useMsal, useIsAuthenticated, useGraph];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useMsal","useIsAuthenticated","loginRequest","useGraph","LoginPage","DashboardPage","FileListPage","LoadingSpinner","MessageDisplay","Header","ConfirmModal","ViewFileModal","ExcelChoiceModal","SettingsModal","FOLDER_NAMES","FOLDER_DETAILS","jsxDEV","_jsxDEV","App","_s","instance","accounts","isAuthenticated","folders","isLoading","error","fetchSharePointData","moveSharePointFile","downloadFileFromSharePoint","userProfile","setUserProfile","message","setMessage","text","type","isDarkMode","setIsDarkMode","localStorage","getItem","currentPage","setCurrentPage","modal","setModal","selectedFile","setSelectedFile","viewedFileContent","setViewedFileContent","excelOpeningPreference","setExcelOpeningPreference","fetchProfile","response","acquireTokenSilent","account","graphResponse","fetch","headers","Authorization","accessToken","profile","json","e","console","showMessage","setItem","document","documentElement","classList","toggle","handleMicrosoftLogin","loginPopup","catch","handleLogout","logoutPopup","handleFileAction","action","file","handleExcelOpen","content","window","open","webUrl","location","href","encodeURIComponent","handleConfirm","successMessage","id","INCOMING_INVOICES","APPROVED_INVOICES","PUBLISHED_DOCUMENTS","SENT_DOCUMENTS","renderPage","pageDetails","title","files","onFileAction","pageType","fileName","_jsxFileName","lineNumber","columnNumber","onLogin","closeModal","startsWith","URL","revokeObjectURL","className","children","onClearMessage","onLogout","onRefresh","onSettingsClick","isOpen","onClose","onConfirm","name","onOpenWeb","onOpenDesktop","toggleDarkMode","prev","currentExcelPreference","onPreferenceChange","_c","$RefreshReg$"],"sources":["/workspaces/InvoiceApp/src/App.js"],"sourcesContent":["// src/App.js\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useMsal, useIsAuthenticated } from '@azure/msal-react';\nimport { loginRequest } from './authConfig';\n\n// Hooks\nimport useGraph from './hooks/useGraph';\n\n// Pages\nimport LoginPage from './pages/LoginPage';\nimport DashboardPage from './pages/DashboardPage';\nimport FileListPage from './pages/FileListPage';\n\n// Components\nimport LoadingSpinner from './components/LoadingSpinner';\nimport MessageDisplay from './components/MessageDisplay';\nimport Header from './components/Header';\nimport ConfirmModal from './components/ConfirmModal';\nimport ViewFileModal from './components/ViewFileModal';\nimport ExcelChoiceModal from './components/ExcelChoiceModal';\nimport SettingsModal from './components/SettingsModal';\n\nimport { FOLDER_NAMES, FOLDER_DETAILS } from './utils/constants';\n\nfunction App() {\n  const { instance, accounts } = useMsal();\n  const isAuthenticated = useIsAuthenticated();\n  const {\n    folders,\n    isLoading,\n    error,\n    fetchSharePointData,\n    moveSharePointFile,\n    downloadFileFromSharePoint,\n  } = useGraph(instance, accounts);\n\n  const [userProfile, setUserProfile] = useState(null);\n  const [message, setMessage] = useState({ text: '', type: '' });\n  const [isDarkMode, setIsDarkMode] = useState(() => localStorage.getItem('theme') === 'dark');\n\n  const [currentPage, setCurrentPage] = useState('login');\n  const [modal, setModal] = useState(null); // Manages all modals\n\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [viewedFileContent, setViewedFileContent] = useState(null);\n\n  const [excelOpeningPreference, setExcelOpeningPreference] = useState(\n    () => localStorage.getItem('excelOpeningPreference') || 'ask'\n  );\n\n  // --- Effects ---\n  useEffect(() => {\n    if (isAuthenticated) {\n      const fetchProfile = async () => {\n        try {\n          const response = await instance.acquireTokenSilent({\n            ...loginRequest,\n            account: accounts[0],\n          });\n          const graphResponse = await fetch('https://graph.microsoft.com/v1.0/me', {\n            headers: { Authorization: `Bearer ${response.accessToken}` },\n          });\n          const profile = await graphResponse.json();\n          setUserProfile(profile);\n          setCurrentPage('dashboard');\n        } catch (e) {\n          console.error(e);\n          showMessage('Could not fetch user profile.', 'error');\n        }\n      };\n      fetchProfile();\n    } else {\n      setCurrentPage('login');\n    }\n  }, [isAuthenticated, accounts, instance]);\n\n  useEffect(() => {\n    if (error) {\n      showMessage(error, 'error');\n    }\n  }, [error]);\n\n  useEffect(() => {\n    localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');\n    document.documentElement.classList.toggle('dark', isDarkMode);\n  }, [isDarkMode]);\n\n  useEffect(() => {\n    localStorage.setItem('excelOpeningPreference', excelOpeningPreference);\n  }, [excelOpeningPreference]);\n\n  // --- Handlers ---\n  const showMessage = (text, type = 'info') => {\n    setMessage({ text, type });\n  };\n\n  const handleMicrosoftLogin = () => instance.loginPopup(loginRequest).catch(e => console.error(e));\n  const handleLogout = () => instance.logoutPopup();\n\n  const handleFileAction = useCallback(async (action, file) => {\n    setSelectedFile(file);\n    switch (action) {\n      case 'view':\n        if (file.type === 'xlsx') {\n          handleExcelOpen(file);\n        } else {\n          try {\n            const content = await downloadFileFromSharePoint(file);\n            setViewedFileContent(content);\n            setModal('viewFile');\n          } catch (e) {\n            showMessage(e.message, 'error');\n          }\n        }\n        break;\n      case 'approve':\n        setModal('confirmApproval');\n        break;\n      case 'sent':\n        setModal('confirmSent');\n        break;\n      default:\n        break;\n    }\n  }, [downloadFileFromSharePoint]);\n\n  const handleExcelOpen = (file) => {\n    if (excelOpeningPreference === 'ask') {\n      setModal('excelChoice');\n    } else if (excelOpeningPreference === 'web') {\n      window.open(file.webUrl, '_blank');\n    } else {\n      window.location.href = `ms-excel:ofe|u|${encodeURIComponent(file.webUrl)}`;\n    }\n  };\n  \n  const handleConfirm = async () => {\n    if (!selectedFile || !modal) return;\n\n    const action = modal;\n    setModal(null);\n\n    try {\n        let successMessage = '';\n        if (action === 'confirmApproval') {\n            await moveSharePointFile(selectedFile.id, FOLDER_DETAILS.INCOMING_INVOICES.id, FOLDER_DETAILS.APPROVED_INVOICES.id);\n            successMessage = 'File approved successfully.';\n        } else if (action === 'confirmSent') {\n            await moveSharePointFile(selectedFile.id, FOLDER_DETAILS.PUBLISHED_DOCUMENTS.id, FOLDER_DETAILS.SENT_DOCUMENTS.id);\n            successMessage = 'File marked as sent.';\n        }\n        showMessage(successMessage, 'success');\n        fetchSharePointData(); // Refresh data after move\n    } catch (e) {\n        showMessage(e.message, 'error');\n    }\n  };\n\n  const renderPage = () => {\n    const pageDetails = FOLDER_DETAILS[currentPage];\n    if (pageDetails) {\n      return (\n        <FileListPage\n          title={pageDetails.title}\n          files={folders[currentPage] || []}\n          onFileAction={handleFileAction}\n          pageType={currentPage}\n        />\n      );\n    }\n\n    switch (currentPage) {\n      case 'dashboard':\n        return (\n          <DashboardPage\n            userProfile={userProfile}\n            folders={folders}\n            setCurrentPage={setCurrentPage}\n          />\n        );\n      case 'login':\n        return <LoginPage onLogin={handleMicrosoftLogin} />;\n      default:\n        return <DashboardPage userProfile={userProfile} folders={folders} setCurrentPage={setCurrentPage} />;\n    }\n  };\n  \n  const closeModal = () => {\n    setModal(null);\n    setSelectedFile(null);\n    if (viewedFileContent && viewedFileContent.startsWith('blob:')) {\n      URL.revokeObjectURL(viewedFileContent);\n    }\n    setViewedFileContent(null);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-light-bg-canvas dark:bg-dark-bg-card text-text-primary-light dark:text-text-primary-dark\">\n      {isLoading && <LoadingSpinner />}\n      <MessageDisplay message={message} onClearMessage={() => setMessage({ text: '', type: '' })} />\n\n      {isAuthenticated && (\n        <Header\n          onLogout={handleLogout}\n          onRefresh={fetchSharePointData}\n          onSettingsClick={() => setModal('settings')}\n          setCurrentPage={setCurrentPage}\n          currentPage={currentPage}\n        />\n      )}\n      \n      <main className=\"p-4 sm:p-6 md:p-8\">\n        {renderPage()}\n      </main>\n\n      {/* Modals */}\n      <ConfirmModal\n        isOpen={modal === 'confirmApproval' || modal === 'confirmSent'}\n        onClose={closeModal}\n        onConfirm={handleConfirm}\n        title={modal === 'confirmApproval' ? \"Confirm Approval\" : \"Confirm Sent\"}\n        message={`Are you sure you want to proceed with this action for \"${selectedFile?.name}\"?`}\n      />\n      <ViewFileModal\n        isOpen={modal === 'viewFile'}\n        onClose={closeModal}\n        file={selectedFile}\n        content={viewedFileContent}\n      />\n      <ExcelChoiceModal\n        isOpen={modal === 'excelChoice'}\n        onClose={closeModal}\n        fileName={selectedFile?.name || ''}\n        onOpenWeb={() => { window.open(selectedFile?.webUrl, '_blank'); closeModal(); }}\n        onOpenDesktop={() => { window.location.href = `ms-excel:ofe|u|${encodeURIComponent(selectedFile?.webUrl)}`; closeModal(); }}\n      />\n      <SettingsModal\n        isOpen={modal === 'settings'}\n        onClose={closeModal}\n        isDarkMode={isDarkMode}\n        toggleDarkMode={() => setIsDarkMode(prev => !prev)}\n        currentExcelPreference={excelOpeningPreference}\n        onPreferenceChange={setExcelOpeningPreference}\n      />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}